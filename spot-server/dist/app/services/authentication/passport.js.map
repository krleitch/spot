{"version":3,"sources":["../../../../src/app/services/authentication/passport.ts"],"names":["JwtStrategy","require","Strategy","ExtractJwt","LocalStrategy","passport","secret","auth","accounts","localOptions","usernameField","passwordField","use","emailOrUsername","password","done","regex","isEmail","match","getAccountByEmailWithPass","then","user","pass","validatePassword","salt","err","getAccountByUsernameWithPass","toString","serializeUser","id","deserializeUser","getAccountById","jwtOptions","jwtFromRequest","fromAuthHeaderAsBearerToken","secretOrKey","payload"],"mappings":"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","sourcesContent":["// passport\nconst JwtStrategy = require('passport-jwt').Strategy;\nconst ExtractJwt = require('passport-jwt').ExtractJwt;\nconst LocalStrategy = require('passport-local').Strategy;\nconst passport = require('passport');\n\n// config\nconst secret = require('@config/secret.json');\n\n// services\nconst auth = require('@services/authentication/authentication');\n\n// db\nconst accounts = require('@db/accounts');\n\n// Login Local\nconst localOptions = {\n  usernameField: 'emailOrUsername',\n  passwordField: 'password'\n};\n\npassport.use(\n  new LocalStrategy(localOptions, function (\n    emailOrUsername: any,\n    password: any,\n    done: any\n  ) {\n    const regex = /^\\S+@\\S+\\.\\S+$/;\n    const isEmail = emailOrUsername.match(regex) != null;\n\n    if (isEmail) {\n      accounts.getAccountByEmailWithPass(emailOrUsername).then(\n        (user: any) => {\n          user = user[0];\n          if (!user || !user.pass) {\n            return done(null, false);\n          }\n          if (!auth.validatePassword(user, password)) {\n            return done(null, false);\n          }\n          delete user.pass;\n          delete user.salt;\n          return done(null, user);\n        },\n        (err: any) => {\n          return done(err);\n        }\n      );\n    } else {\n      accounts.getAccountByUsernameWithPass(emailOrUsername).then(\n        (user: any) => {\n          user = user[0];\n          if (!user || !user.pass) {\n            return done(null, false);\n          }\n          if (!auth.validatePassword(user, password.toString())) {\n            return done(null, false);\n          }\n          delete user.pass;\n          delete user.salt;\n          return done(null, user);\n        },\n        (err: any) => {\n          return done(err);\n        }\n      );\n    }\n  })\n);\n\n// NOT USING\n// For sessions\npassport.serializeUser(function (user: any, done: any) {\n  done(null, user.id);\n});\n\npassport.deserializeUser(function (id: any, done: any) {\n  accounts.getAccountById(id).then(\n    (user: any) => {\n      return done(null, user[0]);\n    },\n    (err: any) => {\n      return done(err);\n    }\n  );\n});\n\n// Login with JWT token\nconst jwtOptions = {\n  jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n  secretOrKey: secret.secret\n};\n\npassport.use(\n  new JwtStrategy(jwtOptions, function (payload: any, done: any) {\n    // NEW\n    // TODO: Can we just refresh the token, so that way we dont need to do db lookup\n    // concerning verified / facebook / google updates\n    accounts.getAccountById(payload.id.id).then(\n      (user: any) => {\n        return done(null, user[0]);\n      },\n      (err: any) => {\n        return done(err);\n      }\n    );\n    // OLD\n    // done(null, payload.id);\n  })\n);\n\nexport default passport;\n"],"file":"passport.js"}