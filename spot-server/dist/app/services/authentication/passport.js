const JwtStrategy=require("passport-jwt").Strategy;const ExtractJwt=require("passport-jwt").ExtractJwt;const LocalStrategy=require("passport-local").Strategy;const passport=require("passport");const secret=require("@config/secret.json");const auth=require("@services/authentication/authentication");const accounts=require("@db/accounts");const localOptions={usernameField:"emailOrUsername",passwordField:"password"};passport.use(new LocalStrategy(localOptions,function(emailOrUsername,password,done){const regex=/^\S+@\S+\.\S+$/;const isEmail=emailOrUsername.match(regex)!=null;if(isEmail){accounts.getAccountByEmailWithPass(emailOrUsername).then(user=>{user=user[0];if(!user||!user.pass){return done(null,false)}if(!auth.validatePassword(user,password)){return done(null,false)}delete user.pass;delete user.salt;return done(null,user)},err=>{return done(err)})}else{accounts.getAccountByUsernameWithPass(emailOrUsername).then(user=>{user=user[0];if(!user||!user.pass){return done(null,false)}if(!auth.validatePassword(user,password.toString())){return done(null,false)}delete user.pass;delete user.salt;return done(null,user)},err=>{return done(err)})}}));passport.serializeUser(function(user,done){done(null,user.id)});passport.deserializeUser(function(id,done){accounts.getAccountById(id).then(user=>{return done(null,user[0])},err=>{return done(err)})});const jwtOptions={jwtFromRequest:ExtractJwt.fromAuthHeaderAsBearerToken(),secretOrKey:secret.secret};passport.use(new JwtStrategy(jwtOptions,function(payload,done){accounts.getAccountById(payload.id.id).then(user=>{return done(null,user[0])},err=>{return done(err)})}));export default passport;
//# sourceMappingURL=passport.js.map