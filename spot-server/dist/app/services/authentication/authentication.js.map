{"version":3,"sources":["../../../../src/app/services/authentication/authentication.ts"],"names":["randomBytes","pbkdf2Sync","require","jwt","request","secret","OAuth2Client","client","passport","accounts","AuthenticationError","AUTH_CONSTANTS","AUTHENTICATION_CONSTANTS","validUsername","username","length","MIN_USERNAME_LENGTH","MAX_USERNAME_LENGTH","UsernameLengthError","PATTERN","match","UsernameCharacterError","validPassword","password","MIN_PASSWORD_LENGTH","MAX_PASSWORD_LENGTH","PasswordLengthError","validEmail","email","regex","EmailInvalidError","validPhone","phone","PhoneInvalidError","optionalAuth","req","res","next","authenticate","session","err","user","info","authenticated","verified","verified_date","requiredAuth","localAuth","UsernameOrPasswordError","generateSalt","toString","hashPassword","salt","iterations","hashLength","digest","validatePassword","undefined","hashedPassword","pass","generateToken","sign","id","expiresIn","isValidToken","token","expire","TOKEN_EXPIRE_TIME","now","Date","getTime","creation_date","createUsernameFromEmail","index","indexOf","substring","Math","random","exists","usernameExists","floor","isValidAccountUpdateTime","time","ACCOUNT_UPDATE_TIMEOUT","getFacebookDetails","accessToken","url","Promise","resolve","reject","error","response","body","JSON","parse","getFacebookId","verifyGoogleIdToken","ticket","verifyIdToken","idToken","audience"],"mappings":"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","sourcesContent":["\n\nconst { randomBytes, pbkdf2Sync } = require('crypto');\nconst jwt = require('jsonwebtoken');\nconst request = require('request');\n\n// config\nconst secret = require('@config/secret.json');\n\n// Google auth\nconst { OAuth2Client } = require('google-auth-library');\nconst client = new OAuth2Client(\n  '805375534727-tsjtjhrf00a4hnvscrnejj5jaioo2nit.apps.googleusercontent.com'\n);\n\n// services\nconst passport = require('@services/authentication/passport');\n\n// db\nconst accounts = require('@db/accounts');\n\n// exceptions\nconst AuthenticationError = require('@exceptions/authentication');\n\n// constants\nconst AUTH_CONSTANTS = require('@constants/authentication');\nconst AUTHENTICATION_CONSTANTS = AUTH_CONSTANTS.AUTHENTICATION_CONSTANTS;\n\n// Registration Validation\n\nfunction validUsername(username: string): Error | null {\n  // Check length\n  if (\n    username.length < AUTHENTICATION_CONSTANTS.MIN_USERNAME_LENGTH ||\n    username.length > AUTHENTICATION_CONSTANTS.MAX_USERNAME_LENGTH\n  ) {\n    return new AuthenticationError.UsernameLengthError(\n      400,\n      AUTHENTICATION_CONSTANTS.MIN_USERNAME_LENGTH,\n      AUTHENTICATION_CONSTANTS.MAX_USERNAME_LENGTH\n    );\n  }\n\n  // start with alphanumeric_ word with . - ' singular no repetition and not at end\n  const PATTERN = /^\\w(?:\\w*(?:['.-]\\w+)?)*$/;\n\n  // Check characters\n  if (username.match(PATTERN) == null) {\n    return new AuthenticationError.UsernameCharacterError(400);\n  }\n\n  return null;\n}\n\nfunction validPassword(password: string): Error | null {\n  // Check length\n  if (\n    password.length < AUTHENTICATION_CONSTANTS.MIN_PASSWORD_LENGTH ||\n    password.length > AUTHENTICATION_CONSTANTS.MAX_PASSWORD_LENGTH\n  ) {\n    return new AuthenticationError.PasswordLengthError(\n      400,\n      AUTHENTICATION_CONSTANTS.MIN_PASSWORD_LENGTH,\n      AUTHENTICATION_CONSTANTS.MAX_PASSWORD_LENGTH\n    );\n  }\n\n  return null;\n}\n\nfunction validEmail(email: string): Error | null {\n  const regex = /^\\S+@\\S+\\.\\S+$/;\n\n  if (email.match(regex) == null) {\n    return new AuthenticationError.EmailInvalidError(400);\n  }\n\n  return null;\n}\n\nfunction validPhone(phone: string): Error | null {\n  const regex =\n    /^\\s*(?:\\+?(\\d{1,3}))?[-. (]*(\\d{3})[-. )]*(\\d{3})[-. ]*(\\d{4})(?: *x(\\d+))?\\s*$/;\n\n  if (phone.match(regex) == null) {\n    return new AuthenticationError.PhoneInvalidError(400);\n  }\n\n  return null;\n}\n\n// Optional Authentication Middleware\n// has req.authenticated if authenticated\nconst optionalAuth = function (req: any, res: any, next: any) {\n  passport.authenticate(\n    'jwt',\n    { session: false },\n    function (err: any, user: any, info: any) {\n      req.authenticated = !!user;\n      req.verified = user ? !!user.verified_date : null;\n      req.user = user || null;\n      next();\n    }\n  )(req, res, next);\n};\n\n// Will throw a authentication error if not authenticated\nconst requiredAuth = function (req: any, res: any, next: any) {\n  passport.authenticate(\n    'jwt',\n    { session: false },\n    function (err: any, user: any, info: any) {\n      req.authenticated = !!user;\n      req.verified = user ? !!user.verified_date : null;\n      req.user = user || null;\n      if (!req.authenticated) {\n        return next(new AuthenticationError.AuthenticationError(401));\n      } else {\n        next();\n      }\n    }\n  )(req, res, next);\n};\n\n// Uses a Username/Email and password combination\n// Will throw if doesnt exist\nconst localAuth = function (req: any, res: any, next: any) {\n  passport.authenticate(\n    'local',\n    { session: false },\n    function (err: any, user: any, info: any) {\n      req.authenticated = !!user;\n      req.verified = user ? !!user.verified_date : null;\n      req.user = user || null;\n      // No user found\n      if (user == false) {\n        return next(new AuthenticationError.UsernameOrPasswordError(401));\n      } else {\n        next();\n      }\n    }\n  )(req, res, next);\n};\n\n// Password Generation\n\nfunction generateSalt(): string {\n  return randomBytes(128).toString('hex');\n}\n\nfunction hashPassword(password: string, salt: string): string {\n  const iterations = 10000;\n  const hashLength = 512;\n  const digest = 'sha512';\n  return pbkdf2Sync(password, salt, iterations, hashLength, digest).toString(\n    'hex'\n  );\n}\n\nfunction validatePassword(user: any, password: string): boolean {\n  if (user === undefined) return false;\n  const hashedPassword = hashPassword(password, user.salt);\n  return hashedPassword === user.pass;\n}\n\nfunction generateToken(user: any): any {\n  return jwt.sign({ id: user }, secret.secret, { expiresIn: '7d' });\n}\n\n// Password Reset\n\nfunction isValidToken(token: any): boolean {\n  // the constant should be a number in minutes\n  const expire = AUTHENTICATION_CONSTANTS.TOKEN_EXPIRE_TIME * 60 * 1000;\n\n  const now = new Date();\n\n  return now.getTime() - new Date(token.creation_date).getTime() <= expire;\n}\n\nasync function createUsernameFromEmail(email: string): Promise<string> {\n  // Try using the email first\n  let username;\n  if (email) {\n    const index = email.indexOf('@');\n    username = email.substring(0, index);\n  } else {\n    username = null;\n  }\n\n  if (!username) {\n    username = 'user' + (10000 + Math.random() * (99999 - 10000)).toString();\n  }\n\n  // Need to make sure the username isn't taken\n  let exists = await accounts.usernameExists(username);\n\n  do {\n    if (exists) {\n      // add a random number from 0-9\n      username += Math.floor(Math.random() * 10).toString();\n      // check again\n      exists = await accounts.usernameExists(username);\n    }\n  } while (exists);\n\n  return username;\n}\n\n// Update times\n\nfunction isValidAccountUpdateTime(time: string): boolean {\n  // the constant should be a number in hours\n  const expire =\n    AUTHENTICATION_CONSTANTS.ACCOUNT_UPDATE_TIMEOUT * 60 * 60 * 1000;\n\n  const now = new Date();\n\n  return now.getTime() - new Date(time).getTime() > expire;\n}\n\n// Facebook\nfunction getFacebookDetails(accessToken: string): Promise<any> {\n  const url =\n    'https://graph.facebook.com/me?fields=id,email&access_token=' + accessToken;\n\n  return new Promise((resolve, reject) => {\n    request(url, function (error: any, response: any, body: any) {\n      if (error) {\n        return reject(error);\n      }\n      resolve({ response: response, body: JSON.parse(body) });\n    });\n  });\n}\n\nfunction getFacebookId(accessToken: string): Promise<any> {\n  const url =\n    'https://graph.facebook.com/me?fields=id&access_token=' + accessToken;\n\n  return new Promise((resolve, reject) => {\n    request(url, function (error: any, response: any, body: any) {\n      if (error) {\n        return reject(error);\n      }\n      resolve({ response: response, body: JSON.parse(body) });\n    });\n  });\n}\n\n// Google\n\nasync function verifyGoogleIdToken(accessToken: string): Promise<any> {\n  const ticket = await client.verifyIdToken({\n    idToken: accessToken,\n    audience:\n      '773867677566-52gc54rg7909514ff2nvvi5oejlg0077.apps.googleusercontent.com'\n    // Specify the CLIENT_ID of the app that accesses the backend\n    // Or, if multiple clients access the backend:\n    //[CLIENT_ID_1, CLIENT_ID_2, CLIENT_ID_3]\n  });\n  return ticket;\n}\n\nexport default {\n  generateSalt,\n  hashPassword,\n  validatePassword,\n  generateToken,\n  getFacebookDetails,\n  getFacebookId,\n  validUsername,\n  validPassword,\n  optionalAuth,\n  requiredAuth,\n  localAuth,\n  validEmail,\n  validPhone,\n  isValidToken,\n  createUsernameFromEmail,\n  verifyGoogleIdToken,\n  isValidAccountUpdateTime\n};"],"file":"authentication.js"}