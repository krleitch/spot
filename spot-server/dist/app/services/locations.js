import googleconfig from"@config/googlekey";import config from"@config/config";import locations from"@db/locations";import*as LocationsError from"@exceptions/locations";import authorization from"@services/authorization/authorization";import{LOCATIONS_CONSTANTS}from"@constants/locations";import roles from"@services/authorization/roles";const checkLocation=async(req,res,next)=>{if(!req.authenticated){return next()}if(authorization.checkRole(req.user,[roles.owner,roles.admin,roles.guest])){return next()}const accountId=req.user.id;let latitude=null;let longitude=null;if(req.query){latitude=Number(req.query.latitude);longitude=Number(req.query.longitude)}const{location}=req.body;if(location){latitude=location.latitude;longitude=location.longitude}if(latitude&&longitude){await verifyLocation(accountId,latitude,longitude).then(valid=>{if(!valid){return next(new LocationsError.LocationError(500))}else{locations.updateLocation(accountId,latitude,longitude).then(rows=>{return next()},err=>{return next()})}})}else{return next()}};function verifyLocation(account_id,myLatitude,myLongitude){return locations.getLatestLocation(account_id).then(location=>{if(location.length<1){return locations.addLocation(account_id,myLatitude,myLongitude).then(rows=>{return true},err=>{return true})}else{const{latitude,longitude,creation_date}=location[0];if(new Date().valueOf()>=new Date(new Date(creation_date).valueOf()+LOCATIONS_CONSTANTS.MAX_TIME_CHANGE*3600000).valueOf()){return true}else{const numHours=(new Date().valueOf()-new Date(creation_date).valueOf())/3600000;const maxDistance=LOCATIONS_CONSTANTS.MAX_DISTANCE_CHANGE*numHours;return distanceBetween(myLatitude,myLongitude,latitude,longitude,"M")<=Math.max(1,maxDistance)}}},err=>{return true})}function addDistanceToRows(rows,latitude,longitude,hideDistance){return rows.map(row=>{const newRow=row;if(latitude&&longitude){const distance=distanceBetween(latitude,longitude,row.latitude,row.longitude,"M");newRow.distance=hideDistance?Math.max(LOCATIONS_CONSTANTS.MIN_DISTANCE,distance):distance;newRow.inRange=newRow.distance<=10}else{newRow.inRange=false}delete newRow.latitude;delete newRow.longitude;return newRow})}function distanceBetween(lat1,lon1,lat2,lon2,unit){if(lat1==lat2&&lon1==lon2){return 0}else{const radlat1=Math.PI*lat1/180;const radlat2=Math.PI*lat2/180;const theta=lon1-lon2;const radtheta=Math.PI*theta/180;let dist=Math.sin(radlat1)*Math.sin(radlat2)+Math.cos(radlat1)*Math.cos(radlat2)*Math.cos(radtheta);if(dist>1){dist=1}dist=Math.acos(dist);dist=dist*180/Math.PI;dist=dist*60*1.1515;if(unit=="K"){dist=dist*1.609344}if(unit=="N"){dist=dist*0.8684}return dist}}function getGeolocation(latitude,longitude){const typeRanks=["point_of_interest","landmark","establishment","premise","transit_station","university","neighborhood","locality","country"];if(config.useTestLocation){return new Promise((resolve,reject)=>{resolve("TEST")})}const baseUrl="https://maps.googleapis.com/maps/api/geocode/json?";const latlng="latlng="+parseFloat(latitude)+","+parseFloat(longitude);let filter="&result_type=";typeRanks.forEach((type,index)=>{filter+=type;if(index!==typeRanks.length-1){filter+="|"}});const key="&key="+googleconfig.APIKey;const url=baseUrl+latlng+filter+key;return new Promise((resolve,reject)=>{resolve("TEST")})}export default{checkLocation,verifyLocation,distanceBetween,getGeolocation,addDistanceToRows};
//# sourceMappingURL=locations.js.map