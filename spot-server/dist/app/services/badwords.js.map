{"version":3,"sources":["../../../src/app/services/badwords.ts"],"names":["checkProfanity","checkProfanityIndex","Filter","badwordsList","config","list","cleanWith","useRegex","filter","text","isUnclean","index","getUncleanWordIndexes","length","split"],"mappings":"AAAA,cAAe,CAAEA,cAAF,CAAkBC,mBAAlB,CAAf,CAEA,MAAOC,CAAAA,MAAP,KAAmB,iBAAnB,CAKA,KAAMC,CAAAA,YAAY,CAAG,CACnB,QADmB,CAEnB,QAFmB,CAGnB,SAHmB,CAInB,SAJmB,CAKnB,QALmB,CAMnB,SANmB,CAOnB,OAPmB,CAQnB,QARmB,CASnB,QATmB,CAUnB,KAVmB,CAWnB,MAXmB,CAYnB,OAZmB,CAanB,QAbmB,CAArB,CAgBA,KAAMC,CAAAA,MAAM,CAAG,CACbC,IAAI,CAAEF,YADO,CAEbG,SAAS,CAAE,GAFE,CAGbC,QAAQ,CAAE,KAHG,CAAf,CAMA,KAAMC,CAAAA,MAAM,CAAG,GAAIN,CAAAA,MAAJ,CAAWE,MAAX,CAAf,CAEA,QAASJ,CAAAA,cAAT,CAAwBS,IAAxB,CAA+C,CAC7C,MAAOD,CAAAA,MAAM,CAACE,SAAP,CAAiBD,IAAjB,CACR,CAGD,QAASR,CAAAA,mBAAT,CAA6BQ,IAA7B,CAA0D,CACxD,KAAME,CAAAA,KAAK,CAAGH,MAAM,CAACI,qBAAP,CAA6BH,IAA7B,CAAd,CAEA,GAAIE,KAAK,CAACE,MAAN,CAAe,CAAnB,CAAsB,CACpB,MAAO,KACR,CAED,MAAOJ,CAAAA,IAAI,CAACK,KAAL,CAAW,OAAX,EAAoBH,KAAK,CAAC,CAAD,CAAzB,CACR","sourcesContent":["export default { checkProfanity, checkProfanityIndex };\n\nimport Filter from 'badwords-filter';\n\n// TODO: languages\n\n// this list should be better and populated from various sources\nconst badwordsList = [\n  'n1gger',\n  'n1gg3r',\n  'n1ggers',\n  'n1gg3rs',\n  'nigger',\n  'niggers',\n  'chink',\n  'chinks',\n  'faggot',\n  'fag',\n  'fags',\n  'spick',\n  'spicks'\n];\n\nconst config = {\n  list: badwordsList,\n  cleanWith: '*',\n  useRegex: false\n};\n\nconst filter = new Filter(config);\n\nfunction checkProfanity(text: string): boolean {\n  return filter.isUnclean(text);\n}\n\n// Return the first word that is profane\nfunction checkProfanityIndex(text: string): string | null {\n  const index = filter.getUncleanWordIndexes(text);\n\n  if (index.length < 0) {\n    return null;\n  }\n\n  return text.split(/\\b\\s+/)[index[0]];\n}\n"],"file":"badwords.js"}