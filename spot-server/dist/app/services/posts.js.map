{"version":3,"sources":["../../../src/app/services/posts.ts"],"names":["calcDistance","generateLink","validContent","shortid","badwords","posts","PostsError","POSTS_CONSTANTS","link","exists","generate","linkExists","content","length","MIN_CONTENT_LENGTH","MAX_CONTENT_LENGTH","InvalidPostLength","test","InvalidPostContent","profane","checkProfanityIndex","InvalidPostProfanity","lat1","lon1","lat2","lon2","unit","radlat1","Math","PI","radlat2","theta","radtheta","dist","sin","cos","acos"],"mappings":"AAAA,cAAe,CAAEA,YAAF,CAAgBC,YAAhB,CAA8BC,YAA9B,CAAf,CAEA,MAAOC,CAAAA,OAAP,KAAoB,SAApB,CAGA,MAAOC,CAAAA,QAAP,KAAqB,oBAArB,CAGA,MAAOC,CAAAA,KAAP,KAAkB,WAAlB,CAGA,MAAO,GAAKC,CAAAA,UAAZ,KAA4B,mBAA5B,CAGA,OAASC,eAAT,KAAgC,kBAAhC,CAEA,cAAeN,CAAAA,YAAf,EAA+C,CAG7C,GAAIO,CAAAA,IAAJ,CACA,GAAIC,CAAAA,MAAJ,CACA,EAAG,CACDD,IAAI,CAAGL,OAAO,CAACO,QAAR,EAAP,CACAD,MAAM,CAAG,KAAMJ,CAAAA,KAAK,CAACM,UAAN,CAAiBH,IAAjB,CAChB,CAHD,MAGSC,MAHT,EAKA,MAAOD,CAAAA,IACR,CAED,QAASN,CAAAA,YAAT,CAAsBU,OAAtB,CAAqD,CACnD,GACEA,OAAO,CAACC,MAAR,CAAiBN,eAAe,CAACO,kBAAjC,EACAF,OAAO,CAACC,MAAR,CAAiBN,eAAe,CAACQ,kBAFnC,CAGE,CACA,MAAO,IAAIT,CAAAA,UAAU,CAACU,iBAAf,CACL,GADK,CAELT,eAAe,CAACO,kBAFX,CAGLP,eAAe,CAACQ,kBAHX,CAKR,CAKD,GAAI,CAAC,iBAAiBE,IAAjB,CAAsBL,OAAtB,CAAL,CAAqC,CACnC,MAAO,IAAIN,CAAAA,UAAU,CAACY,kBAAf,CAAkC,GAAlC,CACR,CAED,KAAMC,CAAAA,OAAO,CAAGf,QAAQ,CAACgB,mBAAT,CAA6BR,OAA7B,CAAhB,CACA,GAAIO,OAAJ,CAAa,CACX,MAAO,IAAIb,CAAAA,UAAU,CAACe,oBAAf,CAAoC,GAApC,CAAyCF,OAAzC,CACR,CAED,MAAO,KACR,CAED,QAASnB,CAAAA,YAAT,CACEsB,IADF,CAEEC,IAFF,CAGEC,IAHF,CAIEC,IAJF,CAKEC,IALF,CAME,CACA,GAAIJ,IAAI,EAAIE,IAAR,EAAgBD,IAAI,EAAIE,IAA5B,CAAkC,CAChC,MAAO,EACR,CAFD,IAEO,CACL,KAAME,CAAAA,OAAO,CAAIC,IAAI,CAACC,EAAL,CAAUP,IAAX,CAAmB,GAAnC,CACA,KAAMQ,CAAAA,OAAO,CAAIF,IAAI,CAACC,EAAL,CAAUL,IAAX,CAAmB,GAAnC,CACA,KAAMO,CAAAA,KAAK,CAAGR,IAAI,CAAGE,IAArB,CACA,KAAMO,CAAAA,QAAQ,CAAIJ,IAAI,CAACC,EAAL,CAAUE,KAAX,CAAoB,GAArC,CACA,GAAIE,CAAAA,IAAI,CACNL,IAAI,CAACM,GAAL,CAASP,OAAT,EAAoBC,IAAI,CAACM,GAAL,CAASJ,OAAT,CAApB,CACAF,IAAI,CAACO,GAAL,CAASR,OAAT,EAAoBC,IAAI,CAACO,GAAL,CAASL,OAAT,CAApB,CAAwCF,IAAI,CAACO,GAAL,CAASH,QAAT,CAF1C,CAGA,GAAIC,IAAI,CAAG,CAAX,CAAc,CACZA,IAAI,CAAG,CACR,CACDA,IAAI,CAAGL,IAAI,CAACQ,IAAL,CAAUH,IAAV,CAAP,CACAA,IAAI,CAAIA,IAAI,CAAG,GAAR,CAAeL,IAAI,CAACC,EAA3B,CACAI,IAAI,CAAGA,IAAI,CAAG,EAAP,CAAY,MAAnB,CACA,GAAIP,IAAI,EAAI,GAAZ,CAAiB,CACfO,IAAI,CAAGA,IAAI,CAAG,QACf,CACD,GAAIP,IAAI,EAAI,GAAZ,CAAiB,CACfO,IAAI,CAAGA,IAAI,CAAG,MACf,CACD,MAAOA,CAAAA,IACR,CACF","sourcesContent":["export default { calcDistance, generateLink, validContent };\n\nimport shortid from 'shortid';\n\n// services\nimport badwords from '@services/badwords';\n\n// db\nimport posts from '@db/posts';\n\n// error\nimport * as PostsError from '@exceptions/posts';\n\n// constants\nimport { POSTS_CONSTANTS } from '@constants/posts';\n\nasync function generateLink(): Promise<string> {\n  // Need to make sure the link isnt already taken\n\n  let link;\n  let exists;\n  do {\n    link = shortid.generate();\n    exists = await posts.linkExists(link);\n  } while (exists);\n\n  return link;\n}\n\nfunction validContent(content: string): Error | null {\n  if (\n    content.length < POSTS_CONSTANTS.MIN_CONTENT_LENGTH ||\n    content.length > POSTS_CONSTANTS.MAX_CONTENT_LENGTH\n  ) {\n    return new PostsError.InvalidPostLength(\n      400,\n      POSTS_CONSTANTS.MIN_CONTENT_LENGTH,\n      POSTS_CONSTANTS.MAX_CONTENT_LENGTH\n    );\n  }\n\n  // Only ASCII characters allowed currently\n  // content field is setup as utf8mb4 so emoji can be added later\n  // eslint-disable-next-line no-control-regex\n  if (!/^[\\x00-\\x7F]*$/.test(content)) {\n    return new PostsError.InvalidPostContent(400);\n  }\n\n  const profane = badwords.checkProfanityIndex(content);\n  if (profane) {\n    return new PostsError.InvalidPostProfanity(400, profane);\n  }\n\n  return null;\n}\n\nfunction calcDistance(\n  lat1: number,\n  lon1: number,\n  lat2: number,\n  lon2: number,\n  unit: string\n) {\n  if (lat1 == lat2 && lon1 == lon2) {\n    return 0;\n  } else {\n    const radlat1 = (Math.PI * lat1) / 180;\n    const radlat2 = (Math.PI * lat2) / 180;\n    const theta = lon1 - lon2;\n    const radtheta = (Math.PI * theta) / 180;\n    let dist =\n      Math.sin(radlat1) * Math.sin(radlat2) +\n      Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n    if (dist > 1) {\n      dist = 1;\n    }\n    dist = Math.acos(dist);\n    dist = (dist * 180) / Math.PI;\n    dist = dist * 60 * 1.1515;\n    if (unit == 'K') {\n      dist = dist * 1.609344;\n    }\n    if (unit == 'N') {\n      dist = dist * 0.8684;\n    }\n    return dist;\n  }\n}\n"],"file":"posts.js"}