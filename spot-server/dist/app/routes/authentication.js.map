{"version":3,"sources":["../../../src/app/routes/authentication.ts"],"names":["express","router","Router","shortid","AuthError","ErrorHandler","accounts","passwordReset","authentication","authorization","friendsService","mail","rateLimiter","roles","use","timeLog","req","res","next","post","authenticationLimiter","email","username","password","phone","body","emailError","validEmail","usernameError","validUsername","passwordError","validPassword","phoneError","validPhone","salt","generateSalt","hash","hashPassword","addAccount","then","account","addAccountMetadata","id","rows","user","token","generateToken","status","json","jwt","expiresIn","err","Register","code","column","sqlMessage","match","slice","replace","EmailTakenError","UsernameTakenError","PhoneTakenError","localAuth","accessToken","FacebookSignUpError","getFacebookDetails","facebookDetails","getFacebookAccount","length","createUsernameFromEmail","getAccountByEmail","addFacebookAccount","user2","addFacebookFriends","friends","created","catchAsync","ticket","verifyGoogleIdToken","payload","getPayload","userid","getGoogleAccount","addGoogleAccount","GoogleSignUpError","passwordResetLimiter","generate","send","template","message","from","to","locals","link","toString","console","log","addPasswordReset","r","PasswordReset","tokenLimiter","getByToken","isValidToken","valid","PasswordResetValidate","newPasswordLimiter","getAccountById","account_id","users","checkRole","guest","NewPassword","changePassword","reset"],"mappings":"AAAA,MAAOA,CAAAA,OAAP,KAAoB,SAApB,CACA,KAAMC,CAAAA,MAAM,CAAGD,OAAO,CAACE,MAAR,EAAf,CAEA,MAAOC,CAAAA,OAAP,KAAoB,SAApB,CAGA,MAAO,GAAKC,CAAAA,SAAZ,KAA2B,4BAA3B,CACA,MAAOC,CAAAA,YAAP,KAAyB,uBAAzB,CAGA,MAAOC,CAAAA,QAAP,KAAqB,cAArB,CACA,MAAOC,CAAAA,aAAP,KAA0B,mBAA1B,CAGA,MAAOC,CAAAA,cAAP,KAA2B,yCAA3B,CACA,MAAOC,CAAAA,aAAP,KAA0B,uCAA1B,CACA,MAAOC,CAAAA,cAAP,KAA2B,mBAA3B,CACA,MAAOC,CAAAA,IAAP,KAAiB,gBAAjB,CAGA,MAAOC,CAAAA,WAAP,KAAwB,sBAAxB,CAGA,MAAOC,CAAAA,KAAP,KAAkB,+BAAlB,CAEAZ,MAAM,CAACa,GAAP,CAAW,QAASC,CAAAA,OAAT,CAAiBC,GAAjB,CAA2BC,GAA3B,CAAqCC,IAArC,CAAgD,CACzDA,IAAI,EACL,CAFD,EAKAjB,MAAM,CAACkB,IAAP,CACE,WADF,CAEEP,WAAW,CAACQ,qBAFd,CAGE,SAAUJ,GAAV,CAAoBC,GAApB,CAA8BC,IAA9B,CAAyC,CACvC,KAAM,CAAEG,KAAF,CAASC,QAAT,CAAmBC,QAAnB,CAA6BC,KAA7B,EAAuCR,GAAG,CAACS,IAAjD,CAIA,KAAMC,CAAAA,UAAU,CAAGlB,cAAc,CAACmB,UAAf,CAA0BN,KAA1B,CAAnB,CACA,GAAIK,UAAJ,CAAgB,CACd,MAAOR,CAAAA,IAAI,CAACQ,UAAD,CACZ,CAED,KAAME,CAAAA,aAAa,CAAGpB,cAAc,CAACqB,aAAf,CAA6BP,QAA7B,CAAtB,CACA,GAAIM,aAAJ,CAAmB,CACjB,MAAOV,CAAAA,IAAI,CAACU,aAAD,CACZ,CAED,KAAME,CAAAA,aAAa,CAAGtB,cAAc,CAACuB,aAAf,CAA6BR,QAA7B,CAAtB,CACA,GAAIO,aAAJ,CAAmB,CACjB,MAAOZ,CAAAA,IAAI,CAACY,aAAD,CACZ,CAED,KAAME,CAAAA,UAAU,CAAGxB,cAAc,CAACyB,UAAf,CAA0BT,KAA1B,CAAnB,CACA,GAAIQ,UAAJ,CAAgB,CACd,MAAOd,CAAAA,IAAI,CAACc,UAAD,CACZ,CAED,KAAME,CAAAA,IAAI,CAAG1B,cAAc,CAAC2B,YAAf,EAAb,CACA,KAAMC,CAAAA,IAAI,CAAG5B,cAAc,CAAC6B,YAAf,CAA4Bd,QAA5B,CAAsCW,IAAtC,CAAb,CAEA5B,QAAQ,CAACgC,UAAT,CAAoBjB,KAApB,CAA2BC,QAA3B,CAAqCc,IAArC,CAA2CZ,KAA3C,CAAkDU,IAAlD,EAAwDK,IAAxD,CACGC,OAAD,EAAkB,CAChBlC,QAAQ,CAACmC,kBAAT,CAA4BD,OAAO,CAAC,CAAD,CAAP,CAAWE,EAAvC,EAA2CH,IAA3C,CACGI,IAAD,EAAe,CACb,KAAMC,CAAAA,IAAI,CAAGJ,OAAO,CAAC,CAAD,CAApB,CACA,KAAMK,CAAAA,KAAK,CAAGrC,cAAc,CAACsC,aAAf,CAA6BF,IAA7B,CAAd,CACA3B,GAAG,CAAC8B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,CACnBC,GAAG,CAAE,CAAEJ,KAAK,CAAEA,KAAT,CAAgBK,SAAS,CAAE,CAA3B,CADc,CAEnBV,OAAO,CAAEI,IAFU,CAArB,CAID,CARH,CASGO,GAAD,EAAc,CACZ,MAAOjC,CAAAA,IAAI,CAAC,GAAId,CAAAA,SAAS,CAACgD,QAAd,CAAuB,GAAvB,CAAD,CACZ,CAXH,CAaD,CAfH,CAgBGD,GAAD,EAAc,CAEZ,GAAIA,GAAG,CAACE,IAAJ,GAAa,cAAjB,CAAiC,CAE/B,KAAMC,CAAAA,MAAM,CAAGH,GAAG,CAACI,UAAJ,CACZC,KADY,CACN,QADM,EAEZC,KAFY,CAEN,CAAC,CAFK,EAEF,CAFE,EAGZC,OAHY,CAGJ,OAHI,CAGK,EAHL,CAAf,CAKA,GAAIJ,MAAM,EAAI,OAAd,CAAuB,CACrB,MAAOpC,CAAAA,IAAI,CAAC,GAAId,CAAAA,SAAS,CAACuD,eAAd,CAA8B,GAA9B,CAAD,CACZ,CAFD,IAEO,IAAIL,MAAM,EAAI,UAAd,CAA0B,CAC/B,MAAOpC,CAAAA,IAAI,CAAC,GAAId,CAAAA,SAAS,CAACwD,kBAAd,CAAiC,GAAjC,CAAD,CACZ,CAFM,IAEA,IAAIN,MAAM,EAAI,OAAd,CAAuB,CAC5B,MAAOpC,CAAAA,IAAI,CAAC,GAAId,CAAAA,SAAS,CAACyD,eAAd,CAA8B,GAA9B,CAAD,CACZ,CACF,CAED,MAAO3C,CAAAA,IAAI,CAAC,GAAId,CAAAA,SAAS,CAACgD,QAAd,CAAuB,GAAvB,CAAD,CACZ,CAnCH,CAqCD,CApEH,EAwEAnD,MAAM,CAACkB,IAAP,CACE,QADF,CAEEP,WAAW,CAACQ,qBAFd,CAGEZ,cAAc,CAACsD,SAHjB,CAIE,SAAU9C,GAAV,CAAoBC,GAApB,CAA8B,CAC5B,KAAM2B,CAAAA,IAAI,CAAG5B,GAAG,CAAC4B,IAAjB,CACA,KAAMC,CAAAA,KAAK,CAAGrC,cAAc,CAACsC,aAAf,CAA6BF,IAA7B,CAAd,CACA3B,GAAG,CAAC8B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,CACnBC,GAAG,CAAE,CAAEJ,KAAK,CAAEA,KAAT,CAAgBK,SAAS,CAAE,CAA3B,CADc,CAEnBV,OAAO,CAAEI,IAFU,CAArB,CAID,CAXH,EAeA3C,MAAM,CAACkB,IAAP,CACE,iBADF,CAEEP,WAAW,CAACQ,qBAFd,CAGE,SAAUJ,GAAV,CAAoBC,GAApB,CAA8BC,IAA9B,CAAyC,CACvC,KAAM,CAAE6C,WAAF,EAAkB/C,GAAG,CAACS,IAA5B,CAEA,GAAI,CAACT,GAAG,CAACS,IAAT,CAAe,CACb,MAAOP,CAAAA,IAAI,CAAC,GAAId,CAAAA,SAAS,CAAC4D,mBAAd,CAAkC,GAAlC,CAAD,CACZ,CAEDxD,cAAc,CAACyD,kBAAf,CAAkCF,WAAlC,EAA+CxB,IAA/C,CACG2B,eAAD,EAA0B,CACxB5D,QAAQ,CAAC6D,kBAAT,CAA4BD,eAAe,CAACzC,IAAhB,CAAqBiB,EAAjD,EAAqDH,IAArD,CACE,KAAOK,CAAAA,IAAP,EAAqB,CACnB,GAAIA,IAAI,CAACwB,MAAL,EAAe,CAAnB,CAAsB,CACpB,KAAM9C,CAAAA,QAAQ,CAAG,KAAMd,CAAAA,cAAc,CAAC6D,uBAAf,CACrBH,eAAe,CAACzC,IAAhB,CAAqBJ,KADA,CAAvB,CAGA,GAAIA,CAAAA,KAAK,CAAG6C,eAAe,CAACzC,IAAhB,CAAqBJ,KAAjC,CAIA,KAAMf,CAAAA,QAAQ,CAACgE,iBAAT,CAA2BjD,KAA3B,EAAkCkB,IAAlC,CACHI,IAAD,EAAe,CACb,GAAIA,IAAI,CAACyB,MAAL,CAAc,CAAlB,CAAqB,CACnB/C,KAAK,CAAG,IACT,CACF,CALG,CAMH8B,GAAD,EAAc,CAAE,CANZ,CAAN,CAUA7C,QAAQ,CACLiE,kBADH,CACsBL,eAAe,CAACzC,IAAhB,CAAqBiB,EAD3C,CAC+CrB,KAD/C,CACsDC,QADtD,EAEGiB,IAFH,CAGKiC,KAAD,EAAgB,CACdlE,QAAQ,CAACmC,kBAAT,CAA4B+B,KAAK,CAAC,CAAD,CAAL,CAAS9B,EAArC,EAAyCH,IAAzC,CACGI,IAAD,EAAe,CACb6B,KAAK,CAAGA,KAAK,CAAC,CAAD,CAAb,CACA,KAAM3B,CAAAA,KAAK,CAAGrC,cAAc,CAACsC,aAAf,CAA6B0B,KAA7B,CAAd,CAGA9D,cAAc,CACX+D,kBADH,CACsBV,WADtB,CACmCS,KAAK,CAAC9B,EADzC,EAEGH,IAFH,CAGKmC,OAAD,EAAkB,CAChBzD,GAAG,CAAC8B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,CACnB2B,OAAO,CAAE,IADU,CAEnB1B,GAAG,CAAE,CAAEJ,KAAK,CAAEA,KAAT,CAAgBK,SAAS,CAAE,CAA3B,CAFc,CAGnBV,OAAO,CAAEgC,KAHU,CAArB,CAKD,CATL,CAUKrB,GAAD,EAAc,CAEZlC,GAAG,CAAC8B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,CACnB2B,OAAO,CAAE,IADU,CAEnB1B,GAAG,CAAE,CAAEJ,KAAK,CAAEA,KAAT,CAAgBK,SAAS,CAAE,CAA3B,CAFc,CAGnBV,OAAO,CAAEgC,KAHU,CAArB,CAKD,CAjBL,CAmBD,CAzBH,CA0BGrB,GAAD,EAAc,CACZ,MAAOjC,CAAAA,IAAI,CAAC,GAAId,CAAAA,SAAS,CAAC4D,mBAAd,CAAkC,GAAlC,CAAD,CACZ,CA5BH,CA8BD,CAlCL,CAmCKb,GAAD,EAAc,CACZ,MAAOjC,CAAAA,IAAI,CAAC,GAAId,CAAAA,SAAS,CAAC4D,mBAAd,CAAkC,GAAlC,CAAD,CACZ,CArCL,CAuCD,CAzDD,IAyDO,CAELpB,IAAI,CAAGA,IAAI,CAAC,CAAD,CAAX,CACA,KAAMC,CAAAA,KAAK,CAAGrC,cAAc,CAACsC,aAAf,CAA6BF,IAA7B,CAAd,CACA3B,GAAG,CAAC8B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,CACnB2B,OAAO,CAAE,KADU,CAEnB1B,GAAG,CAAE,CAAEJ,KAAK,CAAEA,KAAT,CAAgBK,SAAS,CAAE,CAA3B,CAFc,CAGnBV,OAAO,CAAEI,IAHU,CAArB,CAKD,CACF,CArEH,CAsEGO,GAAD,EAAc,CACZ,MAAOjC,CAAAA,IAAI,CAAC,GAAId,CAAAA,SAAS,CAAC4D,mBAAd,CAAkC,GAAlC,CAAD,CACZ,CAxEH,CA0ED,CA5EH,CA6EGb,GAAD,EAAc,CACZ,MAAOjC,CAAAA,IAAI,CAAC,GAAId,CAAAA,SAAS,CAAC4D,mBAAd,CAAkC,GAAlC,CAAD,CACZ,CA/EH,CAiFD,CA3FH,EA+FA/D,MAAM,CAACkB,IAAP,CACE,eADF,CAEEP,WAAW,CAACQ,qBAFd,CAGEf,YAAY,CAACuE,UAAb,CAAwB,eAAgB5D,GAAhB,CAA0BC,GAA1B,CAAoCC,IAApC,CAA+C,CACrE,KAAM,CAAE6C,WAAF,EAAkB/C,GAAG,CAACS,IAA5B,CAEA,GAAI,CACF,KAAMoD,CAAAA,MAAM,CAAG,KAAMrE,CAAAA,cAAc,CAACsE,mBAAf,CAAmCf,WAAnC,CAArB,CAEA,KAAMgB,CAAAA,OAAO,CAAGF,MAAM,CAACG,UAAP,EAAhB,CACA,KAAMC,CAAAA,MAAM,CAAGF,OAAO,CAAC,KAAD,CAAtB,CACA,GAAI1D,CAAAA,KAAK,CAAG0D,OAAO,CAAC,OAAD,CAAnB,CAIA,KAAMzE,CAAAA,QAAQ,CAACgE,iBAAT,CAA2BjD,KAA3B,EAAkCkB,IAAlC,CACHI,IAAD,EAAe,CACb,GAAIA,IAAI,CAACyB,MAAL,CAAc,CAAlB,CAAqB,CACnB/C,KAAK,CAAG,IACT,CACF,CALG,CAMH8B,GAAD,EAAc,CAAE,CANZ,CAAN,CAUA7C,QAAQ,CAAC4E,gBAAT,CAA0BD,MAA1B,EAAkC1C,IAAlC,CACE,KAAOK,CAAAA,IAAP,EAAqB,CACnB,GAAIA,IAAI,CAACwB,MAAL,EAAe,CAAnB,CAAsB,CACpB,KAAM9C,CAAAA,QAAQ,CAAG,KAAMd,CAAAA,cAAc,CAAC6D,uBAAf,CACrBhD,KADqB,CAAvB,CAKAf,QAAQ,CAAC6E,gBAAT,CAA0BF,MAA1B,CAAkC5D,KAAlC,CAAyCC,QAAzC,EAAmDiB,IAAnD,CACGiC,KAAD,EAAgB,CACdlE,QAAQ,CAACmC,kBAAT,CAA4B+B,KAAK,CAAC,CAAD,CAAL,CAAS9B,EAArC,EAAyCH,IAAzC,CACGI,IAAD,EAAe,CACb6B,KAAK,CAAGA,KAAK,CAAC,CAAD,CAAb,CACA,KAAM3B,CAAAA,KAAK,CAAGrC,cAAc,CAACsC,aAAf,CAA6B0B,KAA7B,CAAd,CAEAvD,GAAG,CAAC8B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,CACnB2B,OAAO,CAAE,IADU,CAEnB1B,GAAG,CAAE,CAAEJ,KAAK,CAAEA,KAAT,CAAgBK,SAAS,CAAE,CAA3B,CAFc,CAGnBV,OAAO,CAAEgC,KAHU,CAArB,CAKD,CAVH,CAWGrB,GAAD,EAAc,CACZ,MAAOjC,CAAAA,IAAI,CAAC,GAAId,CAAAA,SAAS,CAACgF,iBAAd,CAAgC,GAAhC,CAAD,CACZ,CAbH,CAeD,CAjBH,CAkBGjC,GAAD,EAAc,CACZ,MAAOjC,CAAAA,IAAI,CAAC,GAAId,CAAAA,SAAS,CAACgF,iBAAd,CAAgC,GAAhC,CAAD,CACZ,CApBH,CAsBD,CA5BD,IA4BO,CAELxC,IAAI,CAAGA,IAAI,CAAC,CAAD,CAAX,CACA,KAAMC,CAAAA,KAAK,CAAGrC,cAAc,CAACsC,aAAf,CAA6BF,IAA7B,CAAd,CACA3B,GAAG,CAAC8B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,CACnB2B,OAAO,CAAE,KADU,CAEnB1B,GAAG,CAAE,CAAEJ,KAAK,CAAEA,KAAT,CAAgBK,SAAS,CAAE,CAA3B,CAFc,CAGnBV,OAAO,CAAEI,IAHU,CAArB,CAKD,CACF,CAxCH,CAyCGO,GAAD,EAAc,CACZ,MAAOjC,CAAAA,IAAI,CAAC,GAAId,CAAAA,SAAS,CAACgF,iBAAd,CAAgC,GAAhC,CAAD,CACZ,CA3CH,CA6CD,CAAC,MAAOjC,GAAP,CAAY,CACZ,MAAOjC,CAAAA,IAAI,CAAC,GAAId,CAAAA,SAAS,CAACgF,iBAAd,CAAgC,GAAhC,CAAD,CACZ,CACF,CAtED,CAHF,EA6EAnF,MAAM,CAACkB,IAAP,CACE,iBADF,CAEEP,WAAW,CAACyE,oBAFd,CAGE,SAAUrE,GAAV,CAAoBC,GAApB,CAA8BC,IAA9B,CAAyC,CACvC,KAAM,CAAEG,KAAF,EAAYL,GAAG,CAACS,IAAtB,CAEAnB,QAAQ,CAACgE,iBAAT,CAA2BjD,KAA3B,EAAkCkB,IAAlC,CACE,KAAOI,CAAAA,IAAP,EAAqB,CACnB,GAAIA,IAAI,CAACyB,MAAL,CAAc,CAAlB,CAAqB,CAEnB,KAAMvB,CAAAA,KAAK,CAAG1C,OAAO,CAACmF,QAAR,EAAd,CAGA,KAAM3E,CAAAA,IAAI,CAACU,KAAL,CAAWkE,IAAX,CACJ,CACEC,QAAQ,CAAE,UADZ,CAEEC,OAAO,CAAE,CACPC,IAAI,CAAE,0BADC,CAEPC,EAAE,CAAEhD,IAAI,CAAC,CAAD,CAAJ,CAAQtB,KAFL,CAFX,CAMEuE,MAAM,CAAE,CACNC,IAAI,CAAE,qCADA,CAENhD,KAAK,CAAEA,KAAK,CAACiD,QAAN,EAFD,CAGNxE,QAAQ,CAAEqB,IAAI,CAAC,CAAD,CAAJ,CAAQrB,QAHZ,CANV,CADI,CAAN,CAeAyE,OAAO,CAACC,GAAR,CAAY,OAAZ,EACAzF,aAAa,CAAC0F,gBAAd,CAA+BtD,IAAI,CAAC,CAAD,CAAJ,CAAQD,EAAvC,CAA2CG,KAA3C,EAAkDN,IAAlD,CACG2D,CAAD,EAAY,CACVjF,GAAG,CAAC8B,MAAJ,CAAW,GAAX,EAAgBwC,IAAhB,CAAqB,EAArB,CACD,CAHH,CAIGpC,GAAD,EAAc,CACZ,MAAOjC,CAAAA,IAAI,CAAC,GAAId,CAAAA,SAAS,CAAC+F,aAAd,CAA4B,GAA5B,CAAD,CACZ,CANH,CAQD,CA7BD,IA6BO,CAELlF,GAAG,CAAC8B,MAAJ,CAAW,GAAX,EAAgBwC,IAAhB,CAAqB,EAArB,CACD,CACF,CAnCH,CAoCGpC,GAAD,EAAc,CACZ,MAAOjC,CAAAA,IAAI,CAAC,GAAId,CAAAA,SAAS,CAAC+F,aAAd,CAA4B,GAA5B,CAAD,CACZ,CAtCH,CAwCD,CA9CH,EAkDAlG,MAAM,CAACkB,IAAP,CACE,wBADF,CAEEP,WAAW,CAACwF,YAFd,CAGE,SAAUpF,GAAV,CAAoBC,GAApB,CAA8BC,IAA9B,CAAyC,CACvC,KAAM,CAAE2B,KAAF,EAAY7B,GAAG,CAACS,IAAtB,CAEAlB,aAAa,CAAC8F,UAAd,CAAyBxD,KAAzB,EAAgCN,IAAhC,CACGI,IAAD,EAAe,CACb,GAAIA,IAAI,CAACyB,MAAL,CAAc,CAAlB,CAAqB,CACnB,GAAI5D,cAAc,CAAC8F,YAAf,CAA4B3D,IAAI,CAAC,CAAD,CAAhC,CAAJ,CAA0C,CACxC1B,GAAG,CAAC8B,MAAJ,CAAW,GAAX,EAAgBwC,IAAhB,CAAqB,CAAE1C,KAAK,CAAEA,KAAT,CAAgB0D,KAAK,CAAE,IAAvB,CAArB,CACD,CAFD,IAEO,CAEL,MAAOrF,CAAAA,IAAI,CAAC,GAAId,CAAAA,SAAS,CAACoG,qBAAd,CAAoC,GAApC,CAAD,CACZ,CACF,CAPD,IAOO,CAEL,MAAOtF,CAAAA,IAAI,CAAC,GAAId,CAAAA,SAAS,CAACoG,qBAAd,CAAoC,GAApC,CAAD,CACZ,CACF,CAbH,CAcGrD,GAAD,EAAc,CACZ,MAAOjC,CAAAA,IAAI,CAAC,GAAId,CAAAA,SAAS,CAACoG,qBAAd,CAAoC,GAApC,CAAD,CACZ,CAhBH,CAkBD,CAxBH,EA4BAvG,MAAM,CAACkB,IAAP,CACE,eADF,CAEEP,WAAW,CAAC6F,kBAFd,CAGE,SAAUzF,GAAV,CAAoBC,GAApB,CAA8BC,IAA9B,CAAyC,CACvC,KAAM,CAAEK,QAAF,CAAYsB,KAAZ,EAAsB7B,GAAG,CAACS,IAAhC,CAEAlB,aAAa,CAAC8F,UAAd,CAAyBxD,KAAzB,EAAgCN,IAAhC,CACGI,IAAD,EAAe,CACb,GAAIA,IAAI,CAACyB,MAAL,CAAc,CAAd,EAAmB5D,cAAc,CAAC8F,YAAf,CAA4B3D,IAAI,CAAC,CAAD,CAAhC,CAAvB,CAA6D,CAC3D,KAAMb,CAAAA,aAAa,CAAGtB,cAAc,CAACuB,aAAf,CAA6BR,QAA7B,CAAtB,CACA,GAAIO,aAAJ,CAAmB,CACjB,MAAOZ,CAAAA,IAAI,CAACY,aAAD,CACZ,CAED,KAAMI,CAAAA,IAAI,CAAG1B,cAAc,CAAC2B,YAAf,EAAb,CACA,KAAMC,CAAAA,IAAI,CAAG5B,cAAc,CAAC6B,YAAf,CAA4Bd,QAA5B,CAAsCW,IAAtC,CAAb,CAEA5B,QAAQ,CAACoG,cAAT,CAAwB/D,IAAI,CAAC,CAAD,CAAJ,CAAQgE,UAAhC,EAA4CpE,IAA5C,CACGqE,KAAD,EAAgB,CACd,GAAInG,aAAa,CAACoG,SAAd,CAAwBD,KAAK,CAAC,CAAD,CAA7B,CAAkC,CAAC/F,KAAK,CAACiG,KAAP,CAAlC,CAAJ,CAAsD,CACpD,MAAO5F,CAAAA,IAAI,CAAC,GAAId,CAAAA,SAAS,CAAC2G,WAAd,CAA0B,GAA1B,CAAD,CACZ,CAEDzG,QAAQ,CAAC0G,cAAT,CAAwBrE,IAAI,CAAC,CAAD,CAAJ,CAAQgE,UAAhC,CAA4CvE,IAA5C,CAAkDF,IAAlD,EAAwDK,IAAxD,CACG2D,CAAD,EAAY,CACVjF,GAAG,CAAC8B,MAAJ,CAAW,GAAX,EAAgBwC,IAAhB,CAAqB,CAAE0B,KAAK,CAAE,IAAT,CAArB,CACD,CAHH,CAIG9D,GAAD,EAAc,CACZ,MAAOjC,CAAAA,IAAI,CAAC,GAAId,CAAAA,SAAS,CAAC2G,WAAd,CAA0B,GAA1B,CAAD,CACZ,CANH,CAQD,CAdH,CAeG5D,GAAD,EAAc,CACZ,MAAOjC,CAAAA,IAAI,CAAC,GAAId,CAAAA,SAAS,CAAC2G,WAAd,CAA0B,GAA1B,CAAD,CACZ,CAjBH,CAmBD,CA5BD,IA4BO,CAEL,MAAO7F,CAAAA,IAAI,CAAC,GAAId,CAAAA,SAAS,CAAC2G,WAAd,CAA0B,GAA1B,CAAD,CACZ,CACF,CAlCH,CAmCG5D,GAAD,EAAc,CACZ,MAAOjC,CAAAA,IAAI,CAAC,GAAId,CAAAA,SAAS,CAAC2G,WAAd,CAA0B,GAA1B,CAAD,CACZ,CArCH,CAuCD,CA7CH,EAgDA,cAAe9G,CAAAA,MAAf","sourcesContent":["import express from 'express';\nconst router = express.Router();\n\nimport shortid from 'shortid';\n\n// exceptions\nimport * as AuthError from '@exceptions/authentication';\nimport ErrorHandler from '@helpers/errorHandler';\n\n// db\nimport accounts from '@db/accounts';\nimport passwordReset from '@db/passwordReset';\n\n// services\nimport authentication from '@services/authentication/authentication';\nimport authorization from '@services/authorization/authorization';\nimport friendsService from '@services/friends';\nimport mail from '@services/mail';\n\n// ratelimiter\nimport rateLimiter from '@helpers/rateLimiter';\n\n// constants\nimport roles from '@services/authorization/roles';\n\nrouter.use(function timeLog(req: any, res: any, next: any) {\n  next();\n});\n\n// Register for a new account\nrouter.post(\n  '/register',\n  rateLimiter.authenticationLimiter,\n  function (req: any, res: any, next: any) {\n    const { email, username, password, phone } = req.body;\n\n    // Validation\n\n    const emailError = authentication.validEmail(email);\n    if (emailError) {\n      return next(emailError);\n    }\n\n    const usernameError = authentication.validUsername(username);\n    if (usernameError) {\n      return next(usernameError);\n    }\n\n    const passwordError = authentication.validPassword(password);\n    if (passwordError) {\n      return next(passwordError);\n    }\n\n    const phoneError = authentication.validPhone(phone);\n    if (phoneError) {\n      return next(phoneError);\n    }\n\n    const salt = authentication.generateSalt();\n    const hash = authentication.hashPassword(password, salt);\n\n    accounts.addAccount(email, username, hash, phone, salt).then(\n      (account: any) => {\n        accounts.addAccountMetadata(account[0].id).then(\n          (rows: any) => {\n            const user = account[0];\n            const token = authentication.generateToken(user);\n            res.status(200).json({\n              jwt: { token: token, expiresIn: 7 },\n              account: user\n            });\n          },\n          (err: any) => {\n            return next(new AuthError.Register(500));\n          }\n        );\n      },\n      (err: any) => {\n        // A duplicate exists\n        if (err.code === 'ER_DUP_ENTRY') {\n          // get the column name for the duplicate from the message\n          const column = err.sqlMessage\n            .match(/'.*?'/g)\n            .slice(-1)[0]\n            .replace(/[']+/g, '');\n\n          if (column == 'email') {\n            return next(new AuthError.EmailTakenError(400));\n          } else if (column == 'username') {\n            return next(new AuthError.UsernameTakenError(400));\n          } else if (column == 'phone') {\n            return next(new AuthError.PhoneTakenError(400));\n          }\n        }\n\n        return next(new AuthError.Register(500));\n      }\n    );\n  }\n);\n\n// Get a user token, use passport local authentication\nrouter.post(\n  '/login',\n  rateLimiter.authenticationLimiter,\n  authentication.localAuth,\n  function (req: any, res: any) {\n    const user = req.user;\n    const token = authentication.generateToken(user);\n    res.status(200).json({\n      jwt: { token: token, expiresIn: 7 },\n      account: user\n    });\n  }\n);\n\n// Facebook login\nrouter.post(\n  '/login/facebook',\n  rateLimiter.authenticationLimiter,\n  function (req: any, res: any, next: any) {\n    const { accessToken } = req.body;\n\n    if (!req.body) {\n      return next(new AuthError.FacebookSignUpError(500));\n    }\n\n    authentication.getFacebookDetails(accessToken).then(\n      (facebookDetails: any) => {\n        accounts.getFacebookAccount(facebookDetails.body.id).then(\n          async (user: any) => {\n            if (user.length == 0) {\n              const username = await authentication.createUsernameFromEmail(\n                facebookDetails.body.email\n              );\n              let email = facebookDetails.body.email;\n\n              // if email is used\n              // do not assign automatically because of errors if email isnt verified by facebook\n              await accounts.getAccountByEmail(email).then(\n                (rows: any) => {\n                  if (rows.length > 0) {\n                    email = null;\n                  }\n                },\n                (err: any) => {}\n              );\n\n              // create the account\n              accounts\n                .addFacebookAccount(facebookDetails.body.id, email, username)\n                .then(\n                  (user2: any) => {\n                    accounts.addAccountMetadata(user2[0].id).then(\n                      (rows: any) => {\n                        user2 = user2[0];\n                        const token = authentication.generateToken(user2);\n\n                        // add facebook friends\n                        friendsService\n                          .addFacebookFriends(accessToken, user2.id)\n                          .then(\n                            (friends: any) => {\n                              res.status(200).json({\n                                created: true,\n                                jwt: { token: token, expiresIn: 7 },\n                                account: user2\n                              });\n                            },\n                            (err: any) => {\n                              // couldnt add your friends\n                              res.status(200).json({\n                                created: true,\n                                jwt: { token: token, expiresIn: 7 },\n                                account: user2\n                              });\n                            }\n                          );\n                      },\n                      (err: any) => {\n                        return next(new AuthError.FacebookSignUpError(500));\n                      }\n                    );\n                  },\n                  (err: any) => {\n                    return next(new AuthError.FacebookSignUpError(500));\n                  }\n                );\n            } else {\n              // account already exists\n              user = user[0];\n              const token = authentication.generateToken(user);\n              res.status(200).json({\n                created: false,\n                jwt: { token: token, expiresIn: 7 },\n                account: user\n              });\n            }\n          },\n          (err: any) => {\n            return next(new AuthError.FacebookSignUpError(500));\n          }\n        );\n      },\n      (err: any) => {\n        return next(new AuthError.FacebookSignUpError(500));\n      }\n    );\n  }\n);\n\n// Google Login\nrouter.post(\n  '/login/google',\n  rateLimiter.authenticationLimiter,\n  ErrorHandler.catchAsync(async function (req: any, res: any, next: any) {\n    const { accessToken } = req.body;\n\n    try {\n      const ticket = await authentication.verifyGoogleIdToken(accessToken);\n\n      const payload = ticket.getPayload();\n      const userid = payload['sub'];\n      let email = payload['email'];\n\n      // if email is used\n      // do not assign automatically because of errors if email isnt verified by google\n      await accounts.getAccountByEmail(email).then(\n        (rows: any) => {\n          if (rows.length > 0) {\n            email = null;\n          }\n        },\n        (err: any) => {}\n      );\n\n      // make or retrieve account\n      accounts.getGoogleAccount(userid).then(\n        async (user: any) => {\n          if (user.length == 0) {\n            const username = await authentication.createUsernameFromEmail(\n              email\n            );\n\n            // create the account\n            accounts.addGoogleAccount(userid, email, username).then(\n              (user2: any) => {\n                accounts.addAccountMetadata(user2[0].id).then(\n                  (rows: any) => {\n                    user2 = user2[0];\n                    const token = authentication.generateToken(user2);\n\n                    res.status(200).json({\n                      created: true,\n                      jwt: { token: token, expiresIn: 7 },\n                      account: user2\n                    });\n                  },\n                  (err: any) => {\n                    return next(new AuthError.GoogleSignUpError(500));\n                  }\n                );\n              },\n              (err: any) => {\n                return next(new AuthError.GoogleSignUpError(500));\n              }\n            );\n          } else {\n            // account already exists\n            user = user[0];\n            const token = authentication.generateToken(user);\n            res.status(200).json({\n              created: false,\n              jwt: { token: token, expiresIn: 7 },\n              account: user\n            });\n          }\n        },\n        (err: any) => {\n          return next(new AuthError.GoogleSignUpError(500));\n        }\n      );\n    } catch (err) {\n      return next(new AuthError.GoogleSignUpError(500));\n    }\n  })\n);\n\n// password reset\nrouter.post(\n  '/password-reset',\n  rateLimiter.passwordResetLimiter,\n  function (req: any, res: any, next: any) {\n    const { email } = req.body;\n\n    accounts.getAccountByEmail(email).then(\n      async (rows: any) => {\n        if (rows.length > 0) {\n          // generate the token\n          const token = shortid.generate();\n\n          // Send email with nodemailer and aws ses transport\n          await mail.email.send(\n            {\n              template: 'password',\n              message: {\n                from: 'spottables.app@gmail.com',\n                to: rows[0].email\n              },\n              locals: {\n                link: 'https://spottables.com/new-password',\n                token: token.toString(),\n                username: rows[0].username\n              }\n            }\n          );\n\n          console.log('meex2');\n          passwordReset.addPasswordReset(rows[0].id, token).then(\n            (r: any) => {\n              res.status(200).send({});\n            },\n            (err: any) => {\n              return next(new AuthError.PasswordReset(500));\n            }\n          );\n        } else {\n          // No account\n          res.status(200).send({});\n        }\n      },\n      (err: any) => {\n        return next(new AuthError.PasswordReset(500));\n      }\n    );\n  }\n);\n\n// checks if a token for password reset exists and is valid\nrouter.post(\n  '/new-password/validate',\n  rateLimiter.tokenLimiter,\n  function (req: any, res: any, next: any) {\n    const { token } = req.body;\n\n    passwordReset.getByToken(token).then(\n      (rows: any) => {\n        if (rows.length > 0) {\n          if (authentication.isValidToken(rows[0])) {\n            res.status(200).send({ token: token, valid: true });\n          } else {\n            // Token expired\n            return next(new AuthError.PasswordResetValidate(400));\n          }\n        } else {\n          // No token exists\n          return next(new AuthError.PasswordResetValidate(400));\n        }\n      },\n      (err: any) => {\n        return next(new AuthError.PasswordResetValidate(400));\n      }\n    );\n  }\n);\n\n// password reset\nrouter.post(\n  '/new-password',\n  rateLimiter.newPasswordLimiter,\n  function (req: any, res: any, next: any) {\n    const { password, token } = req.body;\n\n    passwordReset.getByToken(token).then(\n      (rows: any) => {\n        if (rows.length > 0 && authentication.isValidToken(rows[0])) {\n          const passwordError = authentication.validPassword(password);\n          if (passwordError) {\n            return next(passwordError);\n          }\n\n          const salt = authentication.generateSalt();\n          const hash = authentication.hashPassword(password, salt);\n\n          accounts.getAccountById(rows[0].account_id).then(\n            (users: any) => {\n              if (authorization.checkRole(users[0], [roles.guest])) {\n                return next(new AuthError.NewPassword(500));\n              }\n\n              accounts.changePassword(rows[0].account_id, hash, salt).then(\n                (r: any) => {\n                  res.status(200).send({ reset: true });\n                },\n                (err: any) => {\n                  return next(new AuthError.NewPassword(500));\n                }\n              );\n            },\n            (err: any) => {\n              return next(new AuthError.NewPassword(500));\n            }\n          );\n        } else {\n          // Either no token, or expired\n          return next(new AuthError.NewPassword(500));\n        }\n      },\n      (err: any) => {\n        return next(new AuthError.NewPassword(500));\n      }\n    );\n  }\n);\n\nexport default router;\n"],"file":"authentication.js"}