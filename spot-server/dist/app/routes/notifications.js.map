{"version":3,"sources":["../../../src/app/routes/notifications.ts"],"names":["express","router","Router","notifications","accounts","friends","commentsService","authorization","rateLimiter","NotificationsError","ErrorHandler","roles","use","timeLog","req","res","next","get","genericNotificationLimiter","catchAsync","accountId","user","id","before","query","Date","after","limit","Number","getNotificationByReceiverId","then","rows","i","length","reply_content","addTagsToContent","reply_id","account_id","comment_content","comment_id","err","GetNotifications","response","cursor","creation_date","status","json","getNotificationUnreadByReceiverId","unread","post","receiver","postId","commentId","body","checkRole","guest","SendNotification","getAccountByUsername","getFriendsExist","friendExists","addCommentNotification","notification","addNotification","put","notificationId","params","setNotificationSeen","send","SeenNotification","setAllNotificationsSeen","SeenAllNotification","delete","deleteNotificationById","DeleteNotification","deleteAllNotificationsForAccount","DeleteAllNotification"],"mappings":"AAAA,MAAOA,CAAAA,OAAP,KAAoB,SAApB,CACA,KAAMC,CAAAA,MAAM,CAAGD,OAAO,CAACE,MAAR,EAAf,CAGA,MAAOC,CAAAA,aAAP,KAA0B,mBAA1B,CACA,MAAOC,CAAAA,QAAP,KAAqB,cAArB,CACA,MAAOC,CAAAA,OAAP,KAAoB,aAApB,CAGA,MAAOC,CAAAA,eAAP,KAA4B,oBAA5B,CACA,MAAOC,CAAAA,aAAP,KAA0B,uCAA1B,CAGA,MAAOC,CAAAA,WAAP,KAAwB,sBAAxB,CAGA,MAAO,GAAKC,CAAAA,kBAAZ,KAAoC,2BAApC,CACA,MAAOC,CAAAA,YAAP,KAAyB,uBAAzB,CAGA,MAAOC,CAAAA,KAAP,KAAkB,+BAAlB,CAEAV,MAAM,CAACW,GAAP,CAAW,QAASC,CAAAA,OAAT,CAAiBC,GAAjB,CAA2BC,GAA3B,CAAqCC,IAArC,CAAgD,CACzDA,IAAI,EACL,CAFD,EAKAf,MAAM,CAACgB,GAAP,CACE,GADF,CAEET,WAAW,CAACU,0BAFd,CAGER,YAAY,CAACS,UAAb,CAAwB,MAAOL,GAAP,CAAiBC,GAAjB,CAA2BC,IAA3B,GAAyC,CAC/D,KAAMI,CAAAA,SAAS,CAAGN,GAAG,CAACO,IAAJ,CAASC,EAA3B,CACA,KAAMC,CAAAA,MAAM,CAAGT,GAAG,CAACU,KAAJ,CAAUD,MAAV,CAAmB,GAAIE,CAAAA,IAAJ,CAASX,GAAG,CAACU,KAAJ,CAAUD,MAAnB,CAAnB,CAAgD,IAA/D,CACA,KAAMG,CAAAA,KAAK,CAAGZ,GAAG,CAACU,KAAJ,CAAUE,KAAV,CAAkB,GAAID,CAAAA,IAAJ,CAASX,GAAG,CAACU,KAAJ,CAAUE,KAAnB,CAAlB,CAA8C,IAA5D,CACA,KAAMC,CAAAA,KAAK,CAAGC,MAAM,CAACd,GAAG,CAACU,KAAJ,CAAUG,KAAX,CAApB,CAEAxB,aAAa,CACV0B,2BADH,CAC+BT,SAD/B,CAC0CG,MAD1C,CACkDG,KADlD,CACyDC,KADzD,EAEGG,IAFH,CAGI,KAAOC,CAAAA,IAAP,EAAqB,CAEnB,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGD,IAAI,CAACE,MAAzB,CAAiCD,CAAC,EAAlC,CAAsC,CACpC,GAAI,CACF,GAAI,MAAOD,CAAAA,IAAI,CAACC,CAAD,CAAJ,CAAQE,aAAf,GAAiC,QAArC,CAA+C,CAC7CH,IAAI,CAACC,CAAD,CAAJ,CAAQE,aAAR,CAAwB,KAAM5B,CAAAA,eAAe,CAAC6B,gBAAhB,CAC5BJ,IAAI,CAACC,CAAD,CAAJ,CAAQI,QADoB,CAE5BhB,SAF4B,CAG5BW,IAAI,CAACC,CAAD,CAAJ,CAAQK,UAHoB,CAI5BN,IAAI,CAACC,CAAD,CAAJ,CAAQE,aAJoB,CAM/B,CAPD,IAOO,IAAI,MAAOH,CAAAA,IAAI,CAACC,CAAD,CAAJ,CAAQM,eAAf,GAAmC,QAAvC,CAAiD,CACtDP,IAAI,CAACC,CAAD,CAAJ,CAAQM,eAAR,CACE,KAAMhC,CAAAA,eAAe,CAAC6B,gBAAhB,CACJJ,IAAI,CAACC,CAAD,CAAJ,CAAQO,UADJ,CAEJnB,SAFI,CAGJW,IAAI,CAACC,CAAD,CAAJ,CAAQK,UAHJ,CAIJN,IAAI,CAACC,CAAD,CAAJ,CAAQM,eAJJ,CAMT,CACF,CAAC,MAAOE,GAAP,CAAY,CACZ,MAAOxB,CAAAA,IAAI,CAAC,GAAIP,CAAAA,kBAAkB,CAACgC,gBAAvB,CAAwC,GAAxC,CAAD,CACZ,CACF,CAED,KAAMC,CAAAA,QAAQ,CAAG,CACfvC,aAAa,CAAE4B,IADA,CAEfY,MAAM,CAAE,CACNpB,MAAM,CAAEQ,IAAI,CAACE,MAAL,CAAc,CAAd,CAAkBF,IAAI,CAAC,CAAD,CAAJ,CAAQa,aAA1B,CAA0C,IAD5C,CAENlB,KAAK,CACHK,IAAI,CAACE,MAAL,CAAc,CAAd,CAAkBF,IAAI,CAACA,IAAI,CAACE,MAAL,CAAc,CAAf,CAAJ,CAAsBW,aAAxC,CAAwD,IAHpD,CAFO,CAAjB,CAQA7B,GAAG,CAAC8B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBJ,QAArB,CACD,CArCL,CAsCKF,GAAD,EAAc,CACZ,MAAOxB,CAAAA,IAAI,CAAC,GAAIP,CAAAA,kBAAkB,CAACgC,gBAAvB,CAAwC,GAAxC,CAAD,CACZ,CAxCL,CA0CD,CAhDD,CAHF,EAuDAxC,MAAM,CAACgB,GAAP,CACE,SADF,CAEET,WAAW,CAACU,0BAFd,CAGE,SAAUJ,GAAV,CAAoBC,GAApB,CAA8BC,IAA9B,CAAyC,CACvC,KAAMM,CAAAA,EAAE,CAAGR,GAAG,CAACO,IAAJ,CAASC,EAApB,CAEAnB,aAAa,CAAC4C,iCAAd,CAAgDzB,EAAhD,EAAoDQ,IAApD,CACGC,IAAD,EAAe,CACb,KAAMW,CAAAA,QAAQ,CAAG,CAAEM,MAAM,CAAEjB,IAAI,CAAC,CAAD,CAAJ,CAAQiB,MAAlB,CAAjB,CACAjC,GAAG,CAAC8B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBJ,QAArB,CACD,CAJH,CAKGF,GAAD,EAAc,CACZ,MAAOxB,CAAAA,IAAI,CAAC,GAAIP,CAAAA,kBAAkB,CAACgC,gBAAvB,CAAwC,GAAxC,CAAD,CACZ,CAPH,CASD,CAfH,EAmBAxC,MAAM,CAACgD,IAAP,CACE,GADF,CAEEzC,WAAW,CAACU,0BAFd,CAGE,SAAUJ,GAAV,CAAoBC,GAApB,CAA8BC,IAA9B,CAAyC,CACvC,KAAM,CAAEkC,QAAF,CAAYC,MAAZ,CAAoBC,SAApB,EAAkCtC,GAAG,CAACuC,IAA5C,CACA,KAAMjC,CAAAA,SAAS,CAAGN,GAAG,CAACO,IAAJ,CAASC,EAA3B,CAEA,GAAIf,aAAa,CAAC+C,SAAd,CAAwBxC,GAAG,CAACO,IAA5B,CAAkC,CAACV,KAAK,CAAC4C,KAAP,CAAlC,CAAJ,CAAsD,CACpD,MAAOvC,CAAAA,IAAI,CAAC,GAAIP,CAAAA,kBAAkB,CAAC+C,gBAAvB,CAAwC,GAAxC,CAAD,CACZ,CAEDpD,QAAQ,CAACqD,oBAAT,CAA8BP,QAA9B,EAAwCpB,IAAxC,CACE,KAAOoB,CAAAA,QAAP,EAAyB,CAEvB,GAAI,CAACA,QAAQ,CAAC,CAAD,CAAb,CAAkB,CAChB,MAAOlC,CAAAA,IAAI,CAAC,GAAIP,CAAAA,kBAAkB,CAAC+C,gBAAvB,CAAwC,GAAxC,CAAD,CACZ,CACDN,QAAQ,CAAGA,QAAQ,CAAC,CAAD,CAAnB,CAGA,KAAM7C,CAAAA,OAAO,CAACqD,eAAR,CAAwBtC,SAAxB,CAAmC8B,QAAQ,CAAC5B,EAA5C,EAAgDQ,IAAhD,CACH6B,YAAD,EAAuB,CACrB,GAAI,CAACA,YAAY,CAAC,CAAD,CAAjB,CAAsB,CACpB,MAAO3C,CAAAA,IAAI,CAAC,GAAIP,CAAAA,kBAAkB,CAAC+C,gBAAvB,CAAwC,GAAxC,CAAD,CACZ,CACF,CALG,CAMHhB,GAAD,EAAc,CACZ,MAAOxB,CAAAA,IAAI,CAAC,GAAIP,CAAAA,kBAAkB,CAAC+C,gBAAvB,CAAwC,GAAxC,CAAD,CACZ,CARG,CAAN,CAWA,GAAIJ,SAAJ,CAAe,CACbjD,aAAa,CACVyD,sBADH,CAC0BxC,SAD1B,CACqC8B,QAAQ,CAAC5B,EAD9C,CACkD6B,MADlD,CAC0DC,SAD1D,EAEGtB,IAFH,CAGKC,IAAD,EAAe,CACb,KAAMW,CAAAA,QAAQ,CAAG,CAAEmB,YAAY,CAAE9B,IAAI,CAAC,CAAD,CAApB,CAAjB,CACAhB,GAAG,CAAC8B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBJ,QAArB,CACD,CANL,CAOKF,GAAD,EAAc,CACZ,MAAOxB,CAAAA,IAAI,CAAC,GAAIP,CAAAA,kBAAkB,CAAC+C,gBAAvB,CAAwC,GAAxC,CAAD,CACZ,CATL,CAWD,CAZD,IAYO,CACLrD,aAAa,CAAC2D,eAAd,CAA8B1C,SAA9B,CAAyC8B,QAAQ,CAAC5B,EAAlD,CAAsD6B,MAAtD,EAA8DrB,IAA9D,CACGC,IAAD,EAAe,CACb,KAAMW,CAAAA,QAAQ,CAAG,CAAEmB,YAAY,CAAE9B,IAAI,CAAC,CAAD,CAApB,CAAjB,CACAhB,GAAG,CAAC8B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBJ,QAArB,CACD,CAJH,CAKGF,GAAD,EAAc,CACZ,MAAOxB,CAAAA,IAAI,CAAC,GAAIP,CAAAA,kBAAkB,CAAC+C,gBAAvB,CAAwC,GAAxC,CAAD,CACZ,CAPH,CASD,CACF,CA3CH,CA4CGhB,GAAD,EAAc,CACZ,MAAOxB,CAAAA,IAAI,CAAC,GAAIP,CAAAA,kBAAkB,CAAC+C,gBAAvB,CAAwC,GAAxC,CAAD,CACZ,CA9CH,CAgDD,CA3DH,EA+DAvD,MAAM,CAAC8D,GAAP,CACE,uBADF,CAEEvD,WAAW,CAACU,0BAFd,CAGE,SAAUJ,GAAV,CAAoBC,GAApB,CAA8BC,IAA9B,CAAyC,CACvC,KAAMgD,CAAAA,cAAc,CAAGlD,GAAG,CAACmD,MAAJ,CAAWD,cAAlC,CACA,KAAM5C,CAAAA,SAAS,CAAGN,GAAG,CAACO,IAAJ,CAASC,EAA3B,CAGAnB,aAAa,CAAC+D,mBAAd,CAAkCF,cAAlC,CAAkD5C,SAAlD,EAA6DU,IAA7D,CACGC,IAAD,EAAe,CACb,KAAMW,CAAAA,QAAQ,CAAG,CAAEsB,cAAc,CAAEA,cAAlB,CAAjB,CACAjD,GAAG,CAAC8B,MAAJ,CAAW,GAAX,EAAgBsB,IAAhB,CAAqBzB,QAArB,CACD,CAJH,CAKGF,GAAD,EAAc,CACZ,MAAOxB,CAAAA,IAAI,CAAC,GAAIP,CAAAA,kBAAkB,CAAC2D,gBAAvB,CAAwC,GAAxC,CAAD,CACZ,CAPH,CASD,CAjBH,EAqBAnE,MAAM,CAAC8D,GAAP,CACE,OADF,CAEEvD,WAAW,CAACU,0BAFd,CAGE,SAAUJ,GAAV,CAAoBC,GAApB,CAA8BC,IAA9B,CAAyC,CACvC,KAAMI,CAAAA,SAAS,CAAGN,GAAG,CAACO,IAAJ,CAASC,EAA3B,CAEAnB,aAAa,CAACkE,uBAAd,CAAsCjD,SAAtC,EAAiDU,IAAjD,CACGC,IAAD,EAAe,CACbhB,GAAG,CAAC8B,MAAJ,CAAW,GAAX,EAAgBsB,IAAhB,CAAqB,EAArB,CACD,CAHH,CAIG3B,GAAD,EAAc,CACZ,MAAOxB,CAAAA,IAAI,CAAC,GAAIP,CAAAA,kBAAkB,CAAC6D,mBAAvB,CAA2C,GAA3C,CAAD,CACZ,CANH,CAQD,CAdH,EAkBArE,MAAM,CAACsE,MAAP,CACE,kBADF,CAEE/D,WAAW,CAACU,0BAFd,CAGE,SAAUJ,GAAV,CAAoBC,GAApB,CAA8BC,IAA9B,CAAyC,CACvC,KAAMgD,CAAAA,cAAc,CAAGlD,GAAG,CAACmD,MAAJ,CAAWD,cAAlC,CACA,KAAM5C,CAAAA,SAAS,CAAGN,GAAG,CAACO,IAAJ,CAASC,EAA3B,CAGAnB,aAAa,CAACqE,sBAAd,CAAqCR,cAArC,CAAqD5C,SAArD,EAAgEU,IAAhE,CACGC,IAAD,EAAe,CACb,KAAMW,CAAAA,QAAQ,CAAG,CAAEsB,cAAc,CAAEA,cAAlB,CAAjB,CACAjD,GAAG,CAAC8B,MAAJ,CAAW,GAAX,EAAgBsB,IAAhB,CAAqBzB,QAArB,CACD,CAJH,CAKGF,GAAD,EAAc,CACZ,MAAOxB,CAAAA,IAAI,CAAC,GAAIP,CAAAA,kBAAkB,CAACgE,kBAAvB,CAA0C,GAA1C,CAAD,CACZ,CAPH,CASD,CAjBH,EAqBAxE,MAAM,CAACsE,MAAP,CACE,GADF,CAEE/D,WAAW,CAACU,0BAFd,CAGE,SAAUJ,GAAV,CAAoBC,GAApB,CAA8BC,IAA9B,CAAyC,CACvC,KAAMI,CAAAA,SAAS,CAAGN,GAAG,CAACO,IAAJ,CAASC,EAA3B,CAEAnB,aAAa,CAACuE,gCAAd,CAA+CtD,SAA/C,EAA0DU,IAA1D,CACGC,IAAD,EAAe,CACbhB,GAAG,CAAC8B,MAAJ,CAAW,GAAX,EAAgBsB,IAAhB,CAAqB,EAArB,CACD,CAHH,CAIG3B,GAAD,EAAc,CACZ,MAAOxB,CAAAA,IAAI,CAAC,GAAIP,CAAAA,kBAAkB,CAACkE,qBAAvB,CAA6C,GAA7C,CAAD,CACZ,CANH,CAQD,CAdH,EAiBA,cAAe1E,CAAAA,MAAf","sourcesContent":["import express from 'express';\nconst router = express.Router();\n\n// db\nimport notifications from '@db/notifications';\nimport accounts from '@db/accounts';\nimport friends from '@db/friends';\n\n// services\nimport commentsService from '@services/comments';\nimport authorization from '@services/authorization/authorization';\n\n// ratelimiter\nimport rateLimiter from '@helpers/rateLimiter';\n\n// errors\nimport * as NotificationsError from '@exceptions/notifications';\nimport ErrorHandler from '@helpers/errorHandler';\n\n// constants\nimport roles from '@services/authorization/roles';\n\nrouter.use(function timeLog(req: any, res: any, next: any) {\n  next();\n});\n\n// get notifications for the user\nrouter.get(\n  '/',\n  rateLimiter.genericNotificationLimiter,\n  ErrorHandler.catchAsync(async (req: any, res: any, next: any) => {\n    const accountId = req.user.id;\n    const before = req.query.before ? new Date(req.query.before) : null;\n    const after = req.query.after ? new Date(req.query.after) : null;\n    const limit = Number(req.query.limit);\n\n    notifications\n      .getNotificationByReceiverId(accountId, before, after, limit)\n      .then(\n        async (rows: any) => {\n          // Add tags to comments and replies\n          for (let i = 0; i < rows.length; i++) {\n            try {\n              if (typeof rows[i].reply_content === 'string') {\n                rows[i].reply_content = await commentsService.addTagsToContent(\n                  rows[i].reply_id,\n                  accountId,\n                  rows[i].account_id,\n                  rows[i].reply_content\n                );\n              } else if (typeof rows[i].comment_content === 'string') {\n                rows[i].comment_content =\n                  await commentsService.addTagsToContent(\n                    rows[i].comment_id,\n                    accountId,\n                    rows[i].account_id,\n                    rows[i].comment_content\n                  );\n              }\n            } catch (err) {\n              return next(new NotificationsError.GetNotifications(500));\n            }\n          }\n\n          const response = {\n            notifications: rows,\n            cursor: {\n              before: rows.length > 0 ? rows[0].creation_date : null,\n              after:\n                rows.length > 0 ? rows[rows.length - 1].creation_date : null\n            }\n          };\n          res.status(200).json(response);\n        },\n        (err: any) => {\n          return next(new NotificationsError.GetNotifications(500));\n        }\n      );\n  })\n);\n\n// get number of unread notifications\nrouter.get(\n  '/unread',\n  rateLimiter.genericNotificationLimiter,\n  function (req: any, res: any, next: any) {\n    const id = req.user.id;\n\n    notifications.getNotificationUnreadByReceiverId(id).then(\n      (rows: any) => {\n        const response = { unread: rows[0].unread };\n        res.status(200).json(response);\n      },\n      (err: any) => {\n        return next(new NotificationsError.GetNotifications(500));\n      }\n    );\n  }\n);\n\n// Send a notification, keep errors generic\nrouter.post(\n  '/',\n  rateLimiter.genericNotificationLimiter,\n  function (req: any, res: any, next: any) {\n    const { receiver, postId, commentId } = req.body;\n    const accountId = req.user.id;\n\n    if (authorization.checkRole(req.user, [roles.guest])) {\n      return next(new NotificationsError.SendNotification(500));\n    }\n\n    accounts.getAccountByUsername(receiver).then(\n      async (receiver: any) => {\n        // The receiving account doesnt exist\n        if (!receiver[0]) {\n          return next(new NotificationsError.SendNotification(500));\n        }\n        receiver = receiver[0];\n\n        // Make sure they are friends\n        await friends.getFriendsExist(accountId, receiver.id).then(\n          (friendExists: any) => {\n            if (!friendExists[0]) {\n              return next(new NotificationsError.SendNotification(500));\n            }\n          },\n          (err: any) => {\n            return next(new NotificationsError.SendNotification(500));\n          }\n        );\n\n        if (commentId) {\n          notifications\n            .addCommentNotification(accountId, receiver.id, postId, commentId)\n            .then(\n              (rows: any) => {\n                const response = { notification: rows[0] };\n                res.status(200).json(response);\n              },\n              (err: any) => {\n                return next(new NotificationsError.SendNotification(500));\n              }\n            );\n        } else {\n          notifications.addNotification(accountId, receiver.id, postId).then(\n            (rows: any) => {\n              const response = { notification: rows[0] };\n              res.status(200).json(response);\n            },\n            (err: any) => {\n              return next(new NotificationsError.SendNotification(500));\n            }\n          );\n        }\n      },\n      (err: any) => {\n        return next(new NotificationsError.SendNotification(500));\n      }\n    );\n  }\n);\n\n// Set a notification as seen\nrouter.put(\n  '/:notificationId/seen',\n  rateLimiter.genericNotificationLimiter,\n  function (req: any, res: any, next: any) {\n    const notificationId = req.params.notificationId;\n    const accountId = req.user.id;\n\n    // only sets seen if you own it\n    notifications.setNotificationSeen(notificationId, accountId).then(\n      (rows: any) => {\n        const response = { notificationId: notificationId };\n        res.status(200).send(response);\n      },\n      (err: any) => {\n        return next(new NotificationsError.SeenNotification(500));\n      }\n    );\n  }\n);\n\n// Set all notifications as seen\nrouter.put(\n  '/seen',\n  rateLimiter.genericNotificationLimiter,\n  function (req: any, res: any, next: any) {\n    const accountId = req.user.id;\n\n    notifications.setAllNotificationsSeen(accountId).then(\n      (rows: any) => {\n        res.status(200).send({});\n      },\n      (err: any) => {\n        return next(new NotificationsError.SeenAllNotification(500));\n      }\n    );\n  }\n);\n\n// Delete a notification\nrouter.delete(\n  '/:notificationId',\n  rateLimiter.genericNotificationLimiter,\n  function (req: any, res: any, next: any) {\n    const notificationId = req.params.notificationId;\n    const accountId = req.user.id;\n\n    // only removes if you own it\n    notifications.deleteNotificationById(notificationId, accountId).then(\n      (rows: any) => {\n        const response = { notificationId: notificationId };\n        res.status(200).send(response);\n      },\n      (err: any) => {\n        return next(new NotificationsError.DeleteNotification(500));\n      }\n    );\n  }\n);\n\n// Delete all notifications\nrouter.delete(\n  '/',\n  rateLimiter.genericNotificationLimiter,\n  function (req: any, res: any, next: any) {\n    const accountId = req.user.id;\n\n    notifications.deleteAllNotificationsForAccount(accountId).then(\n      (rows: any) => {\n        res.status(200).send({});\n      },\n      (err: any) => {\n        return next(new NotificationsError.DeleteAllNotification(500));\n      }\n    );\n  }\n);\n\nexport default router;\n"],"file":"notifications.js"}