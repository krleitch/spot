import express from"express";const router=express.Router();import{pbkdf2Sync}from"crypto";import accounts from"@db/accounts";import verifyAccount from"@db/verifyAccount";import authenticationService from"@services/authentication/authentication";import authorization from"@services/authorization/authorization";import friendsService from"@services/friends";import mail from"@services/mail";import*as AuthenticationError from"@exceptions/authentication";import*as AccountsError from"@exceptions/accounts";import ErrorHandler from"@helpers/errorHandler";import roles from"@services/authorization/roles";router.use(function timeLog(req,res,next){next()});router.delete("/",function(req,res,next){const accountId=req.user.id;if(authorization.checkRole(req.user,[roles.guest])){return next(new AccountsError.DeleteAccount(500))}accounts.deleteAccount(accountId).then(rows=>{res.status(200).send({})},err=>{return next(new AccountsError.DeleteAccount(500))})});router.get("/",function(req,res,next){const accountId=req.user.id;accounts.getAccountById(accountId).then(rows=>{const response={account:rows[0]};res.status(200).json(response)},err=>{return next(new AccountsError.GetAccount(500))})});router.put("/username",ErrorHandler.catchAsync(async function(req,res,next){const accountId=req.user.id;const{username}=req.body;if(authorization.checkRole(req.user,[roles.guest])){return next(new AccountsError.UpdateUsername(500))}const usernameError=authenticationService.validUsername(username);if(usernameError){return next(usernameError)}try{const rows=await accounts.getAccountById(accountId);if(rows.length<1){return next(new AccountsError.UpdateUsername(500))}const valid=authenticationService.isValidAccountUpdateTime(rows[0].username_updated_at);if(!valid){return next(new AccountsError.UpdateUsernameTimeout(500))}}catch(e){return next(new AccountsError.UpdateUsername(500))}accounts.updateUsername(username,accountId).then(rows=>{if(rows.length<0){return next(new AccountsError.UpdateUsername(500))}const result={username:rows[0].username};res.status(200).json(result)},err=>{if(err.code==="ER_DUP_ENTRY"){const column=err.sqlMessage.match(/'.*?'/g).slice(-1)[0].replace(/[']+/g,"");if(column=="username"){return next(new AuthenticationError.UsernameTakenError(400))}}return next(new AccountsError.UpdateUsername(500))})}));router.put("/email",ErrorHandler.catchAsync(async function(req,res,next){const accountId=req.user.id;const{email}=req.body;if(authorization.checkRole(req.user,[roles.guest])){return next(new AccountsError.UpdateEmail(500))}const emailError=authenticationService.validEmail(email);if(emailError){return next(emailError)}try{const rows=await accounts.getAccountById(accountId);if(rows.length<1){return next(new AccountsError.UpdateEmail(500))}if(rows[0].email){const valid=authenticationService.isValidAccountUpdateTime(rows[0].email_updated_at);if(!valid){return next(new AccountsError.UpdateEmailTimeout(500))}}}catch(e){return next(new AccountsError.UpdateEmail(500))}accounts.updateEmail(email,accountId).then(rows=>{if(rows.length<0){return next(new AccountsError.UpdateEmail(500))}const result={email:rows[0].email};res.status(200).json(result)},err=>{if(err.code==="ER_DUP_ENTRY"){const column=err.sqlMessage.match(/'.*?'/g).slice(-1)[0].replace(/[']+/g,"");if(column=="email"){return next(new AuthenticationError.EmailTakenError(400))}}return next(new AccountsError.UpdateEmail(500))})}));router.put("/phone",ErrorHandler.catchAsync(async function(req,res,next){const accountId=req.user.id;const{phone}=req.body;if(authorization.checkRole(req.user,[roles.guest])){return next(new AccountsError.UpdatePhone(500))}const phoneError=authenticationService.validPhone(phone);if(phoneError){return next(phoneError)}try{const rows=await accounts.getAccountById(accountId);if(rows.length<1){return next(new AccountsError.UpdatePhone(500))}const valid=authenticationService.isValidAccountUpdateTime(rows[0].phone_updated_at);if(!valid){return next(new AccountsError.UpdatePhoneTimeout(500))}}catch(e){return next(new AccountsError.UpdatePhone(500))}accounts.updatePhone(phone,accountId).then(rows=>{if(rows.length<0){return next(new AccountsError.UpdatePhone(500))}const result={phone:rows[0].phone};res.status(200).json(result)},err=>{if(err.code==="ER_DUP_ENTRY"){const column=err.sqlMessage.match(/'.*?'/g).slice(-1)[0].replace(/[']+/g,"");if(column=="phone"){return next(new AuthenticationError.PhoneTakenError(400))}}return next(new AccountsError.UpdatePhone(500))})}));router.post("/facebook",function(req,res,next){const{accessToken}=req.body;const accountId=req.user.id;if(authorization.checkRole(req.user,[roles.guest])){return next(new AccountsError.FacebookConnect(500))}authenticationService.getFacebookId(accessToken).then(facebookId=>{accounts.getFacebookAccount(facebookId.body.id).then(user=>{if(user.length==0){accounts.connectFacebookAccount(facebookId.body.id,accountId).then(account=>{friendsService.addFacebookFriends(accessToken,accountId).then(added=>{const response={account:account[0]};res.status(200).json(response)},err=>{return next(new AccountsError.FacebookConnect(500))})},err=>{return next(new AccountsError.FacebookConnect(500))})}else{return next(new AccountsError.FacebookConnectExists(500))}},err=>{return next(new AccountsError.FacebookConnect(500))})},err=>{return next(new AccountsError.FacebookConnect(500))})});router.post("/facebook/disconnect",function(req,res,next){const accountId=req.user.id;if(authorization.checkRole(req.user,[roles.guest])){return next(new AccountsError.FacebookDisconnect(500))}accounts.disconnectFacebookAccount(accountId).then(rows=>{res.status(200).send({})},err=>{return next(new AccountsError.FacebookDisconnect(500))})});router.post("/google",ErrorHandler.catchAsync(async function(req,res,next){const{accessToken}=req.body;const accountId=req.user.id;if(authorization.checkRole(req.user,[roles.guest])){return next(new AccountsError.GoogleConnect(500))}try{const ticket=await authenticationService.verifyGoogleIdToken(accessToken);const payload=ticket.getPayload();const userid=payload["sub"];accounts.getGoogleAccount(userid).then(user=>{if(user.length==0){accounts.connectGoogleAccount(userid,accountId).then(account=>{const response={account:account[0]};res.status(200).json(response)},err=>{return next(new AccountsError.GoogleConnect(500))})}else{return next(new AccountsError.GoogleConnect(500))}},err=>{return next(new AccountsError.GoogleConnect(500))})}catch(err){return next(new AccountsError.GoogleConnect(500))}}));router.post("/google/disconnect",function(req,res,next){const accountId=req.user.id;if(authorization.checkRole(req.user,[roles.guest])){return next(new AccountsError.GoogleConnect(500))}accounts.disconnectGoogleAccount(accountId).then(rows=>{res.status(200).send({})},err=>{return next(new AccountsError.GoogleConnect(500))})});router.get("/metadata",function(req,res,next){const accountId=req.user.id;accounts.getAccountMetadata(accountId).then(rows=>{if(rows.length<0){return next(new AccountsError.GetMetadata(500))}const response={metadata:rows[0]};res.status(200).json(response)},err=>{return next(new AccountsError.GetMetadata(500))})});router.put("/metadata",ErrorHandler.catchAsync(async function(req,res,next){const accountId=req.user.id;if(authorization.checkRole(req.user,[roles.guest])){return next(new AccountsError.GetMetadata(500))}const{distance_unit,search_type,search_distance,mature_filter,theme_web}=req.body;if(distance_unit){await accounts.updateAccountsMetadataDistanceUnit(accountId,distance_unit).then(rows=>{},err=>{return next(new AccountsError.MetadataDistanceUnit(500))})}if(search_type){await accounts.updateAccountsMetadataSearchType(accountId,search_type).then(rows=>{},err=>{return next(new AccountsError.MetadataSearchType(500))})}if(search_distance){await accounts.updateAccountsMetadataSearchDistance(accountId,search_distance).then(rows=>{},err=>{return next(new AccountsError.MetadataSearchDistance(500))})}if(typeof mature_filter!=="undefined"){await accounts.updateAccountsMetadataMatureFilter(accountId,mature_filter).then(rows=>{},err=>{return next(new AccountsError.MetadataMatureFilter(500))})}if(theme_web){await accounts.updateAccountsMetadataThemeWeb(accountId,theme_web).then(rows=>{},err=>{return next(new AccountsError.MetadataThemeWeb(500))})}accounts.getAccountMetadata(accountId).then(rows=>{if(rows.length<0){return next(new AccountsError.GetMetadata(500))}const response={metadata:rows[0]};res.status(200).json(response)},err=>{return next(new AccountsError.GetMetadata(500))})}));router.post("/verify",ErrorHandler.catchAsync(async function(req,res,next){const accountId=req.user.id;const value=new Date().toString()+accountId.toString();const iterations=10000;const hashLength=16;const salt="salt";const digest="sha512";const token=pbkdf2Sync(value,salt,iterations,hashLength,digest).toString("hex");if(authorization.checkRole(req.user,[roles.guest])){return next(new AccountsError.SendVerify(500))}if(!req.user.email){return next(new AccountsError.SendVerify(500))}await mail.email.send({template:"verify",message:{from:"spottables.app@gmail.com",to:req.user.email},locals:{link:"https://spottables.com/verify/"+token,username:req.user.username}});verifyAccount.addVerifyAccount(accountId,token).then(rows=>{res.status(200).json({})},err=>{return next(new AccountsError.SendVerify(500))})}));router.post("/verify/confirm",function(req,res,next){const accountId=req.user.id;const{token}=req.body;if(authorization.checkRole(req.user,[roles.guest])){return next(new AccountsError.ConfirmVerify(500))}verifyAccount.getByToken(accountId,token).then(rows=>{if(rows.length>0){if(!authenticationService.isValidToken(rows[0])){return next(new AccountsError.ConfirmVerify(499))}const verifiedDate=new Date;accounts.verifyAccount(rows[0].account_id,verifiedDate).then(r=>{const response={account:r[0]};res.status(200).send(response)},err=>{return next(new AccountsError.ConfirmVerify(500))})}else{return next(new AccountsError.ConfirmVerify(500))}},err=>{return next(new AccountsError.ConfirmVerify(500))})});export default router;
//# sourceMappingURL=accounts.js.map