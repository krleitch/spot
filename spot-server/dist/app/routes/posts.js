import express from"express";const router=express.Router();import uuid from"uuid";import posts from"@db/posts";import reports from"@db/reports";import postsService from"@services/posts";import locationsService from"@services/locations";import imageService from"@services/image";import authorization from"@services/authorization/authorization";const singleUpload=imageService.upload.single("image");import*as PostsError from"@exceptions/posts";import*as ReportError from"@exceptions/report";import*as AuthenticationError from"@exceptions/authentication";import ErrorHandler from"@helpers/errorHandler";import rateLimiter from"@helpers/rateLimiter";import{POSTS_CONSTANTS}from"@constants/posts";import{REPORT_CONSTANTS}from"@constants/report";import roles from"@services/authorization/roles";import config from"@config/config";router.use(function timeLog(req,res,next){next()});router.get("/",rateLimiter.genericPostLimiter,ErrorHandler.catchAsync(async function(req,res,next){if(!req.authenticated){return next(new AuthenticationError.AuthenticationError(401))}const accountId=req.user.id;const latitude=Number(req.query.latitude);const longitude=Number(req.query.longitude);const location=req.query.location;const sort=req.query.sort;const offset=Number(req.query.offset);const limit=Number(req.query.limit);const date=req.query.date||null;posts.getPosts(accountId,sort,location,latitude,longitude,offset,limit,date).then(rows=>{rows=locationsService.addDistanceToRows(rows,latitude,longitude,true);const response={posts:rows};res.status(200).json(response)},err=>{return next(new PostsError.GetPosts(500))})}));router.post("/",rateLimiter.createPostLimiter,ErrorHandler.catchAsync(async(req,res,next)=>{if(!req.authenticated){return next(new AuthenticationError.AuthenticationError(401))}if(!req.verified){return next(new AuthenticationError.VerifyError(400))}if(authorization.checkRole(req.user,[roles.guest])){return next(new PostsError.PostError(500))}const accountId=req.user.id;const postId=uuid.v4();req.filename=postId;singleUpload(req,res,async function(err){if(err){return next(new PostsError.PostImage(422))}const json=JSON.parse(req.body.json);let content=json.content;const location=json.location;const image=req.file?req.file.location:null;content=content.trim();if(content.split(/\r\n|\r|\n/).length>POSTS_CONSTANTS.MAX_LINE_LENGTH){return next(new PostsError.InvalidPostLineLength(400,POSTS_CONSTANTS.MAX_LINE_LENGTH))}if(content.length==0&&!image){return next(new PostsError.NoPostContent(400))}const contentError=postsService.validContent(content);if(contentError){return next(contentError)}const link=await postsService.generateLink();let imageNsfw=false;if(config.testNsfwLocal&&image){try{imageNsfw=await imageService.predictNsfw(image)}catch(err){}}locationsService.getGeolocation(location.latitude,location.longitude).then(geolocation=>{posts.addPost(postId,content,location,image,imageNsfw,link,accountId,geolocation).then(rows=>{if(config.testNsfwLambda&&image){imageService.predictNsfwLambda(image).then(result=>{if(Object.prototype.hasOwnProperty.call(result,"StatusCode")&&result.StatusCode===200){const payload=JSON.parse(result.Payload);if(payload.statusCode===200){const predict=JSON.parse(payload.body);if(Object.prototype.hasOwnProperty.call(predict,"className")){const isNsfw=predict.className==="Porn"||predict.className==="Hentai";posts.updateNsfw(postId,isNsfw)}}}},err=>{})}rows=locationsService.addDistanceToRows(rows,location.latitude,location.longitude,true);const response={post:rows[0]};res.status(200).json(response)},err=>{return next(new PostsError.PostError(500))})},err=>{return next(new PostsError.PostError(500))})})}));router.put("/:postId/like",rateLimiter.genericPostLimiter,function(req,res,next){if(!req.authenticated){return next(new AuthenticationError.AuthenticationError(401))}if(authorization.checkRole(req.user,[roles.guest])){return next(new PostsError.LikePost(500))}const postId=req.params.postId;const accountId=req.user.id;posts.likePost(postId,accountId).then(rows=>{const response={postId:postId};res.status(200).json(response)},err=>{return next(new PostsError.LikePost(500))})});router.put("/:postId/dislike",rateLimiter.genericPostLimiter,function(req,res,next){if(!req.authenticated){return next(new AuthenticationError.AuthenticationError(401))}if(authorization.checkRole(req.user,[roles.guest])){return next(new PostsError.DislikePost(500))}const postId=req.params.postId;const accountId=req.user.id;posts.dislikePost(postId,accountId).then(rows=>{const response={postId:postId};res.status(200).json(response)},err=>{return next(new PostsError.DislikePost(500))})});router.put("/:postId/unrated",rateLimiter.genericPostLimiter,function(req,res,next){if(!req.authenticated){return next(new AuthenticationError.AuthenticationError(401))}if(authorization.checkRole(req.user,[roles.guest])){return next(new PostsError.UnratedPost(500))}const postId=req.params.postId;const accountId=req.user.id;posts.unratedPost(postId,accountId).then(rows=>{const response={postId:postId};res.status(200).json(response)},err=>{return next(new PostsError.UnratedPost(500))})});router.delete("/:postId",rateLimiter.genericPostLimiter,function(req,res,next){if(!req.authenticated){return next(new AuthenticationError.AuthenticationError(401))}if(authorization.checkRole(req.user,[roles.guest])){return next(new PostsError.DeletePost(500))}const postId=req.params.postId;const accountId=req.user.id;posts.checkOwned(postId,accountId).then(owned=>{if(owned||authorization.checkRole(req.user,[roles.owner,roles.admin])){posts.deletePost(postId).then(rows=>{const response={postId:postId};res.status(200).json(response)},err=>{return next(new PostsError.DeletePost(500))})}else{return next(new PostsError.DeletePost(500))}},err=>{return next(new PostsError.DeletePost(500))})});router.put("/:postId/report",rateLimiter.genericPostLimiter,function(req,res,next){if(!req.authenticated){return next(new AuthenticationError.AuthenticationError(401))}if(authorization.checkRole(req.user,[roles.guest])){return next(new ReportError.ReportError(500))}const postId=req.params.postId;const accountId=req.user.id;const{content,category}=req.body;if(content.length<REPORT_CONSTANTS.MIN_CONTENT_LENGTH||content.length>REPORT_CONSTANTS.MAX_CONTENT_LENGTH){return next(new ReportError.ReportLengthError(400,REPORT_CONSTANTS.MIN_CONTENT_LENGTH,REPORT_CONSTANTS.MAX_CONTENT_LENGTH))}reports.addPostReport(postId,accountId,content,category).then(rows=>{res.status(200).send({})},err=>{return next(new ReportError.ReportError(500))})});router.get("/activity",rateLimiter.genericPostLimiter,function(req,res,next){if(!req.authenticated){return next(new AuthenticationError.AuthenticationError(401))}const accountId=req.user.id;const before=req.query.before?new Date(req.query.before):null;const after=req.query.after?new Date(req.query.after):null;const limit=Number(req.query.limit);const latitude=Number(req.query.latitude);const longitude=Number(req.query.longitude);posts.getPostsActivity(accountId,before,after,limit).then(rows=>{rows=locationsService.addDistanceToRows(rows,latitude,longitude,true);const response={activity:rows,size:rows.length,cursor:{before:rows.length>0?rows[0].creation_date:null,after:rows.length>0?rows[rows.length-1].creation_date:null}};res.status(200).json(response)},err=>{return next(new PostsError.PostActivity(500))})});router.get("/:postLink",rateLimiter.genericPostLimiter,function(req,res,next){const postLink=req.params.postLink;const latitude=Number(req.query.latitude);const longitude=Number(req.query.longitude);posts.getPostByLink(postLink,req.authenticated?req.user.id:null).then(rows=>{if(rows.length<1){return next(new PostsError.GetSinglePost(500))}rows=locationsService.addDistanceToRows(rows,latitude,longitude,true);const response={post:rows[0]};res.status(200).json(response)},err=>{return next(new PostsError.GetSinglePost(500))})});export default router;
//# sourceMappingURL=posts.js.map