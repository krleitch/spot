{"version":3,"sources":["../../../src/app/routes/accounts.ts"],"names":["express","router","Router","pbkdf2Sync","accounts","verifyAccount","authenticationService","authorization","friendsService","mail","AuthenticationError","AccountsError","ErrorHandler","roles","use","timeLog","req","res","next","delete","accountId","user","id","checkRole","guest","DeleteAccount","deleteAccount","then","rows","status","send","err","get","getAccountById","response","account","json","GetAccount","put","catchAsync","username","body","UpdateUsername","usernameError","validUsername","length","valid","isValidAccountUpdateTime","username_updated_at","UpdateUsernameTimeout","e","updateUsername","result","code","column","sqlMessage","match","slice","replace","UsernameTakenError","email","UpdateEmail","emailError","validEmail","email_updated_at","UpdateEmailTimeout","updateEmail","EmailTakenError","phone","UpdatePhone","phoneError","validPhone","phone_updated_at","UpdatePhoneTimeout","updatePhone","PhoneTakenError","post","accessToken","FacebookConnect","getFacebookId","facebookId","getFacebookAccount","connectFacebookAccount","addFacebookFriends","added","FacebookConnectExists","FacebookDisconnect","disconnectFacebookAccount","GoogleConnect","ticket","verifyGoogleIdToken","payload","getPayload","userid","getGoogleAccount","connectGoogleAccount","disconnectGoogleAccount","getAccountMetadata","GetMetadata","metadata","distance_unit","search_type","search_distance","mature_filter","theme_web","updateAccountsMetadataDistanceUnit","MetadataDistanceUnit","updateAccountsMetadataSearchType","MetadataSearchType","updateAccountsMetadataSearchDistance","MetadataSearchDistance","updateAccountsMetadataMatureFilter","MetadataMatureFilter","updateAccountsMetadataThemeWeb","MetadataThemeWeb","value","Date","toString","iterations","hashLength","salt","digest","token","SendVerify","template","message","from","to","locals","link","addVerifyAccount","ConfirmVerify","getByToken","isValidToken","verifiedDate","account_id","r"],"mappings":"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","sourcesContent":["import express from 'express';\nconst router = express.Router();\n\nimport { pbkdf2Sync } from 'crypto';\n\n// db\nimport accounts from '@db/accounts';\nimport verifyAccount from '@db/verifyAccount';\n\n// services\nimport authenticationService from '@services/authentication/authentication';\nimport authorization from '@services/authorization/authorization';\nimport friendsService from '@services/friends';\nimport mail from '@services/mail';\n\n// exceptions\nimport * as AuthenticationError from '@exceptions/authentication';\nimport * as AccountsError from '@exceptions/accounts';\nimport ErrorHandler from '@helpers/errorHandler';\n\n// constants\nimport roles from '@services/authorization/roles';\n\nrouter.use(function timeLog(req: any, res: any, next: any) {\n  next();\n});\n\n// soft deletes the user account\nrouter.delete('/', function (req: any, res: any, next: any) {\n  const accountId = req.user.id;\n\n  if (authorization.checkRole(req.user, [roles.guest])) {\n    return next(new AccountsError.DeleteAccount(500));\n  }\n\n  accounts.deleteAccount(accountId).then(\n    (rows: any) => {\n      res.status(200).send({});\n    },\n    (err: any) => {\n      return next(new AccountsError.DeleteAccount(500));\n    }\n  );\n});\n\n// Get account information\nrouter.get('/', function (req: any, res: any, next: any) {\n  const accountId = req.user.id;\n\n  accounts.getAccountById(accountId).then(\n    (rows: any) => {\n      const response = { account: rows[0] };\n      res.status(200).json(response);\n    },\n    (err: any) => {\n      return next(new AccountsError.GetAccount(500));\n    }\n  );\n});\n\n// Update username\nrouter.put(\n  '/username',\n  ErrorHandler.catchAsync(async function (req: any, res: any, next: any) {\n    const accountId = req.user.id;\n    const { username } = req.body;\n\n    if (authorization.checkRole(req.user, [roles.guest])) {\n      return next(new AccountsError.UpdateUsername(500));\n    }\n\n    // Make sure the username is valid\n    const usernameError = authenticationService.validUsername(username);\n    if (usernameError) {\n      return next(usernameError);\n    }\n\n    // make sure you haven't updated recently\n    try {\n      const rows = await accounts.getAccountById(accountId);\n      if (rows.length < 1) {\n        return next(new AccountsError.UpdateUsername(500));\n      }\n      const valid = authenticationService.isValidAccountUpdateTime(\n        rows[0].username_updated_at\n      );\n      if (!valid) {\n        return next(new AccountsError.UpdateUsernameTimeout(500));\n      }\n    } catch (e) {\n      return next(new AccountsError.UpdateUsername(500));\n    }\n\n    accounts.updateUsername(username, accountId).then(\n      (rows: any) => {\n        if (rows.length < 0) {\n          return next(new AccountsError.UpdateUsername(500));\n        }\n        const result = { username: rows[0].username };\n        res.status(200).json(result);\n      },\n      (err: any) => {\n        if (err.code === 'ER_DUP_ENTRY') {\n          // get the column name for the duplicate from the message\n          const column = err.sqlMessage\n            .match(/'.*?'/g)\n            .slice(-1)[0]\n            .replace(/[']+/g, '');\n\n          if (column == 'username') {\n            return next(new AuthenticationError.UsernameTakenError(400));\n          }\n        }\n\n        return next(new AccountsError.UpdateUsername(500));\n      }\n    );\n  })\n);\n\n// Update email\nrouter.put(\n  '/email',\n  ErrorHandler.catchAsync(async function (req: any, res: any, next: any) {\n    const accountId = req.user.id;\n    const { email } = req.body;\n\n    if (authorization.checkRole(req.user, [roles.guest])) {\n      return next(new AccountsError.UpdateEmail(500));\n    }\n\n    const emailError = authenticationService.validEmail(email);\n    if (emailError) {\n      return next(emailError);\n    }\n\n    // make sure you haven't updated recently\n    try {\n      const rows = await accounts.getAccountById(accountId);\n      if (rows.length < 1) {\n        return next(new AccountsError.UpdateEmail(500));\n      }\n      // If its your first email dont check, from facebook/google login where email is taken\n      if (rows[0].email) {\n        const valid = authenticationService.isValidAccountUpdateTime(\n          rows[0].email_updated_at\n        );\n        if (!valid) {\n          return next(new AccountsError.UpdateEmailTimeout(500));\n        }\n      }\n    } catch (e) {\n      return next(new AccountsError.UpdateEmail(500));\n    }\n\n    accounts.updateEmail(email, accountId).then(\n      (rows: any) => {\n        if (rows.length < 0) {\n          return next(new AccountsError.UpdateEmail(500));\n        }\n        const result = { email: rows[0].email };\n        res.status(200).json(result);\n      },\n      (err: any) => {\n        if (err.code === 'ER_DUP_ENTRY') {\n          // get the column name for the duplicate from the message\n          const column = err.sqlMessage\n            .match(/'.*?'/g)\n            .slice(-1)[0]\n            .replace(/[']+/g, '');\n\n          if (column == 'email') {\n            return next(new AuthenticationError.EmailTakenError(400));\n          }\n        }\n\n        return next(new AccountsError.UpdateEmail(500));\n      }\n    );\n  })\n);\n\n// Update phone\nrouter.put(\n  '/phone',\n  ErrorHandler.catchAsync(async function (req: any, res: any, next: any) {\n    const accountId = req.user.id;\n    const { phone } = req.body;\n\n    if (authorization.checkRole(req.user, [roles.guest])) {\n      return next(new AccountsError.UpdatePhone(500));\n    }\n\n    const phoneError = authenticationService.validPhone(phone);\n    if (phoneError) {\n      return next(phoneError);\n    }\n\n    // make sure you haven't updated recently\n    try {\n      const rows = await accounts.getAccountById(accountId);\n      if (rows.length < 1) {\n        return next(new AccountsError.UpdatePhone(500));\n      }\n      const valid = authenticationService.isValidAccountUpdateTime(\n        rows[0].phone_updated_at\n      );\n      if (!valid) {\n        return next(new AccountsError.UpdatePhoneTimeout(500));\n      }\n    } catch (e) {\n      return next(new AccountsError.UpdatePhone(500));\n    }\n\n    accounts.updatePhone(phone, accountId).then(\n      (rows: any) => {\n        if (rows.length < 0) {\n          return next(new AccountsError.UpdatePhone(500));\n        }\n        const result = { phone: rows[0].phone };\n        res.status(200).json(result);\n      },\n      (err: any) => {\n        if (err.code === 'ER_DUP_ENTRY') {\n          // get the column name for the duplicate from the message\n          const column = err.sqlMessage\n            .match(/'.*?'/g)\n            .slice(-1)[0]\n            .replace(/[']+/g, '');\n\n          if (column == 'phone') {\n            return next(new AuthenticationError.PhoneTakenError(400));\n          }\n        }\n\n        return next(new AccountsError.UpdatePhone(500));\n      }\n    );\n  })\n);\n\n// Facebook Connect\nrouter.post('/facebook', function (req: any, res: any, next: any) {\n  const { accessToken } = req.body;\n  const accountId = req.user.id;\n\n  if (authorization.checkRole(req.user, [roles.guest])) {\n    return next(new AccountsError.FacebookConnect(500));\n  }\n\n  authenticationService.getFacebookId(accessToken).then(\n    (facebookId: any) => {\n      accounts.getFacebookAccount(facebookId.body.id).then(\n        (user: any) => {\n          if (user.length == 0) {\n            // create the account\n            accounts.connectFacebookAccount(facebookId.body.id, accountId).then(\n              (account: any) => {\n                friendsService.addFacebookFriends(accessToken, accountId).then(\n                  (added: boolean) => {\n                    const response = {\n                      account: account[0]\n                    };\n                    res.status(200).json(response);\n                  },\n                  (err: any) => {\n                    return next(new AccountsError.FacebookConnect(500));\n                  }\n                );\n              },\n              (err: any) => {\n                return next(new AccountsError.FacebookConnect(500));\n              }\n            );\n          } else {\n            // account already exists\n            return next(new AccountsError.FacebookConnectExists(500));\n          }\n        },\n        (err: any) => {\n          return next(new AccountsError.FacebookConnect(500));\n        }\n      );\n    },\n    (err: any) => {\n      return next(new AccountsError.FacebookConnect(500));\n    }\n  );\n});\n\nrouter.post('/facebook/disconnect', function (req: any, res: any, next: any) {\n  const accountId = req.user.id;\n\n  if (authorization.checkRole(req.user, [roles.guest])) {\n    return next(new AccountsError.FacebookDisconnect(500));\n  }\n\n  // remove the facebook id from the account\n  accounts.disconnectFacebookAccount(accountId).then(\n    (rows: any) => {\n      res.status(200).send({});\n    },\n    (err: any) => {\n      return next(new AccountsError.FacebookDisconnect(500));\n    }\n  );\n});\n\n// Google Connect\nrouter.post(\n  '/google',\n  ErrorHandler.catchAsync(async function (req: any, res: any, next: any) {\n    const { accessToken } = req.body;\n    const accountId = req.user.id;\n\n    if (authorization.checkRole(req.user, [roles.guest])) {\n      return next(new AccountsError.GoogleConnect(500));\n    }\n\n    try {\n      const ticket = await authenticationService.verifyGoogleIdToken(accessToken);\n\n      const payload = ticket.getPayload();\n      const userid = payload['sub'];\n\n      accounts.getGoogleAccount(userid).then(\n        (user: any) => {\n          if (user.length == 0) {\n            // create the account\n            accounts.connectGoogleAccount(userid, accountId).then(\n              (account: any) => {\n                const response = {\n                  account: account[0]\n                };\n                res.status(200).json(response);\n              },\n              (err: any) => {\n                return next(new AccountsError.GoogleConnect(500));\n              }\n            );\n          } else {\n            // account already exists\n            return next(new AccountsError.GoogleConnect(500));\n          }\n        },\n        (err: any) => {\n          return next(new AccountsError.GoogleConnect(500));\n        }\n      );\n    } catch (err) {\n      return next(new AccountsError.GoogleConnect(500));\n    }\n  })\n);\n\nrouter.post('/google/disconnect', function (req: any, res: any, next: any) {\n  const accountId = req.user.id;\n\n  if (authorization.checkRole(req.user, [roles.guest])) {\n    return next(new AccountsError.GoogleConnect(500));\n  }\n\n  // remove the google id from the account\n  accounts.disconnectGoogleAccount(accountId).then(\n    (rows: any) => {\n      res.status(200).send({});\n    },\n    (err: any) => {\n      return next(new AccountsError.GoogleConnect(500));\n    }\n  );\n});\n\n// Get account metadata\nrouter.get('/metadata', function (req: any, res: any, next: any) {\n  const accountId = req.user.id;\n\n  // Get account metadata\n  accounts.getAccountMetadata(accountId).then(\n    (rows: any) => {\n      if (rows.length < 0) {\n        return next(new AccountsError.GetMetadata(500));\n      }\n      const response = { metadata: rows[0] };\n      res.status(200).json(response);\n    },\n    (err: any) => {\n      return next(new AccountsError.GetMetadata(500));\n    }\n  );\n});\n\nrouter.put(\n  '/metadata',\n  ErrorHandler.catchAsync(async function (req: any, res: any, next: any) {\n    const accountId = req.user.id;\n\n    if (authorization.checkRole(req.user, [roles.guest])) {\n      return next(new AccountsError.GetMetadata(500));\n    }\n\n    const {\n      distance_unit,\n      search_type,\n      search_distance,\n      mature_filter,\n      theme_web\n    } = req.body;\n\n    // TODO, really dont like the await strategy here\n    // We only ever change metadata 1 property at a time right now\n    // Will need to be changed later\n\n    if (distance_unit) {\n      await accounts\n        .updateAccountsMetadataDistanceUnit(accountId, distance_unit)\n        .then(\n          (rows: any) => {},\n          (err: any) => {\n            return next(new AccountsError.MetadataDistanceUnit(500));\n          }\n        );\n    }\n\n    if (search_type) {\n      await accounts\n        .updateAccountsMetadataSearchType(accountId, search_type)\n        .then(\n          (rows: any) => {},\n          (err: any) => {\n            return next(new AccountsError.MetadataSearchType(500));\n          }\n        );\n    }\n\n    if (search_distance) {\n      await accounts\n        .updateAccountsMetadataSearchDistance(accountId, search_distance)\n        .then(\n          (rows: any) => {},\n          (err: any) => {\n            return next(new AccountsError.MetadataSearchDistance(500));\n          }\n        );\n    }\n\n    if (typeof mature_filter !== 'undefined') {\n      await accounts\n        .updateAccountsMetadataMatureFilter(accountId, mature_filter)\n        .then(\n          (rows: any) => {},\n          (err: any) => {\n            return next(new AccountsError.MetadataMatureFilter(500));\n          }\n        );\n    }\n\n    if (theme_web) {\n      await accounts.updateAccountsMetadataThemeWeb(accountId, theme_web).then(\n        (rows: any) => {},\n        (err: any) => {\n          return next(new AccountsError.MetadataThemeWeb(500));\n        }\n      );\n    }\n\n    // Get account metadata\n    accounts.getAccountMetadata(accountId).then(\n      (rows: any) => {\n        if (rows.length < 0) {\n          return next(new AccountsError.GetMetadata(500));\n        }\n        const response = { metadata: rows[0] };\n        res.status(200).json(response);\n      },\n      (err: any) => {\n        return next(new AccountsError.GetMetadata(500));\n      }\n    );\n  })\n);\n\n// Verify Account - Send email\nrouter.post(\n  '/verify',\n  ErrorHandler.catchAsync(async function (req: any, res: any, next: any) {\n    const accountId = req.user.id;\n\n    const value = new Date().toString() + accountId.toString();\n    const iterations = 10000;\n    const hashLength = 16;\n    const salt = 'salt';\n    const digest = 'sha512';\n    const token = pbkdf2Sync(\n      value,\n      salt,\n      iterations,\n      hashLength,\n      digest\n    ).toString('hex');\n\n    if (authorization.checkRole(req.user, [roles.guest])) {\n      return next(new AccountsError.SendVerify(500));\n    }\n\n    if (!req.user.email) {\n      return next(new AccountsError.SendVerify(500));\n    }\n\n    // send email with nodemailerm using aws ses transport\n    // TODO, ERROR HANDLE THIS AND OTHER MAIL\n\n    await mail.email.send(\n      {\n        template: 'verify',\n        message: {\n          from: 'spottables.app@gmail.com',\n          to: req.user.email\n        },\n        locals: {\n          link: 'https://spottables.com/verify/' + token,\n          username: req.user.username\n        }\n      }\n    );\n\n    verifyAccount.addVerifyAccount(accountId, token).then(\n      (rows: any) => {\n        res.status(200).json({});\n      },\n      (err: any) => {\n        return next(new AccountsError.SendVerify(500));\n      }\n    );\n  })\n);\n\n// Verify Account confirmation\nrouter.post('/verify/confirm', function (req: any, res: any, next: any) {\n  const accountId = req.user.id;\n  const { token } = req.body;\n\n  if (authorization.checkRole(req.user, [roles.guest])) {\n    return next(new AccountsError.ConfirmVerify(500));\n  }\n\n  // Add record to verify account\n  verifyAccount.getByToken(accountId, token).then(\n    (rows: any) => {\n      if (rows.length > 0) {\n        // check valid expirary date\n        if (!authenticationService.isValidToken(rows[0])) {\n          return next(new AccountsError.ConfirmVerify(499));\n        }\n\n        const verifiedDate = new Date();\n        accounts.verifyAccount(rows[0].account_id, verifiedDate).then(\n          (r: any) => {\n            const response = { account: r[0] };\n            res.status(200).send(response);\n          },\n          (err: any) => {\n            return next(new AccountsError.ConfirmVerify(500));\n          }\n        );\n      } else {\n        return next(new AccountsError.ConfirmVerify(500));\n      }\n    },\n    (err: any) => {\n      return next(new AccountsError.ConfirmVerify(500));\n    }\n  );\n});\n\nexport default router;\n"],"file":"accounts.js"}