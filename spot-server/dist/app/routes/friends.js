import express from"express";const router=express.Router();import friends from"@db/friends";import accounts from"@db/accounts";import rateLimiter from"@helpers/rateLimiter";import*as FriendsError from"@exceptions/friends";import ErrorHandler from"@helpers/errorHandler";import{ERROR_MESSAGES}from"@exceptions/messages";const FRIENDS_ERROR_MESSAGES=ERROR_MESSAGES.MAIN.FRIENDS;import authorization from"@services/authorization/authorization";import roles from"@services/authorization/roles";router.use(function timeLog(req,res,next){next()});router.get("/",rateLimiter.genericFriendLimiter,function(req,res,next){const accountId=req.user.id;const date=req.query.date;const limit=Number(req.query.limit);friends.getFriends(accountId,date,limit.toString()).then(rows=>{const response={friends:rows};res.status(200).json(response)},err=>{return next(new FriendsError.GetFriends(500))})});router.delete("/:friendId",rateLimiter.genericFriendLimiter,function(req,res,next){const accountId=req.user.id;const friendId=req.params.friendId;friends.deleteFriendById(friendId,accountId).then(rows=>{const response={friendId:friendId};res.status(200).json(response)},err=>{return next(new FriendsError.DeleteFriend(500))})});router.get("/pending",rateLimiter.genericFriendLimiter,function(req,res,next){const accountId=req.user.id;friends.getPendingFriendRequests(accountId).then(rows=>{const response={friendRequests:rows};res.status(200).json(response)},err=>{return next(new FriendsError.GetPendingFriendRequests(500))})});router.delete("/pending/:friendId",rateLimiter.genericFriendLimiter,function(req,res,next){const accountId=req.user.id;const friendId=req.params.friendId;friends.deleteFriendById(friendId,accountId).then(rows=>{const response={friendRequestId:friendId};res.status(200).json(response)},err=>{return next(new FriendsError.DeletePendingFriendRequest(500))})});router.get("/requests",rateLimiter.genericFriendLimiter,function(req,res,next){const accountId=req.user.id;friends.getFriendRequests(accountId).then(rows=>{const response={friendRequests:rows};res.status(200).json(response)},err=>{return next(new FriendsError.GetFriendRequests(500))})});router.post("/requests",rateLimiter.genericFriendLimiter,ErrorHandler.catchAsync(async function(req,res,next){const accountId=req.user.id;const{username}=req.body;if(authorization.checkRole(req.user,[roles.guest])){return next(new FriendsError.FriendExistsError(500))}accounts.getAccountByUsername(username).then(async receiverId=>{if(receiverId[0]===undefined){return next(new FriendsError.UsernameError(FRIENDS_ERROR_MESSAGES.NO_USER,400))}if(receiverId[0].id===accountId){return next(new FriendsError.UsernameError(FRIENDS_ERROR_MESSAGES.SELF,400))}const exists=await friends.getFriendsExist(accountId,receiverId[0].id);if(exists.length>0){return next(new FriendsError.FriendExistsError(500))}friends.friendRequestExists(receiverId[0].id,accountId).then(friendRequest=>{if(friendRequest.length>0){if(friendRequest[0].account_id===accountId){return next(new FriendsError.UsernameError(FRIENDS_ERROR_MESSAGES.REQUEST_EXISTS,400))}friends.acceptFriendRequest(friendRequest[0].id,accountId).then(rows=>{accounts.getAccountById(rows[0].account_id).then(account=>{rows[0].username=account[0].username;const response={friend:rows[0]};res.status(200).json(response)},err=>{return next(new FriendsError.FriendExistsError(500))})},err=>{return next(new FriendsError.FriendExistsError(500))})}else{friends.addFriendRequest(accountId,receiverId[0].id).then(rows=>{rows[0].username=rows[0].friend_username;delete rows[0].friend_username;delete rows[0].account_username;const response={friend:rows[0]};res.status(200).json(response)},err=>{return next(new FriendsError.UsernameError(FRIENDS_ERROR_MESSAGES.GENERIC,500))})}},err=>{return next(new FriendsError.FriendExistsError(500))})},err=>{return next(new FriendsError.UsernameError(FRIENDS_ERROR_MESSAGES.GENERIC,500))})}));router.post("/requests/accept",rateLimiter.genericFriendLimiter,function(req,res,next){const accountId=req.user.id;const{friendRequestId}=req.body;if(authorization.checkRole(req.user,[roles.guest])){return next(new FriendsError.AcceptFriendRequest(500))}friends.acceptFriendRequest(friendRequestId,accountId).then(rows=>{if(rows.length<1){return next(new FriendsError.AcceptFriendRequest(500))}else{rows[0].username=rows[0].account_username;delete rows[0].friend_username;delete rows[0].account_username;const response={friend:rows[0]};res.status(200).json(response)}},err=>{return next(new FriendsError.AcceptFriendRequest(500))})});router.post("/requests/decline",rateLimiter.genericFriendLimiter,function(req,res,next){const accountId=req.user.id;const{friendRequestId}=req.body;friends.declineFriendRequest(friendRequestId,accountId).then(rows=>{const response={};res.status(200).json(response)},err=>{return next(new FriendsError.DeclineFriendRequest(500))})});export default router;
//# sourceMappingURL=friends.js.map