import express from"express";const router=express.Router();import shortid from"shortid";import*as AuthError from"@exceptions/authentication";import ErrorHandler from"@helpers/errorHandler";import accounts from"@db/accounts";import passwordReset from"@db/passwordReset";import authentication from"@services/authentication/authentication";import authorization from"@services/authorization/authorization";import friendsService from"@services/friends";import mail from"@services/mail";import rateLimiter from"@helpers/rateLimiter";import roles from"@services/authorization/roles";router.use(function timeLog(req,res,next){next()});router.post("/register",rateLimiter.authenticationLimiter,function(req,res,next){const{email,username,password,phone}=req.body;const emailError=authentication.validEmail(email);if(emailError){return next(emailError)}const usernameError=authentication.validUsername(username);if(usernameError){return next(usernameError)}const passwordError=authentication.validPassword(password);if(passwordError){return next(passwordError)}const phoneError=authentication.validPhone(phone);if(phoneError){return next(phoneError)}const salt=authentication.generateSalt();const hash=authentication.hashPassword(password,salt);accounts.addAccount(email,username,hash,phone,salt).then(account=>{accounts.addAccountMetadata(account[0].id).then(rows=>{const user=account[0];const token=authentication.generateToken(user);res.status(200).json({jwt:{token:token,expiresIn:7},account:user})},err=>{return next(new AuthError.Register(500))})},err=>{if(err.code==="ER_DUP_ENTRY"){const column=err.sqlMessage.match(/'.*?'/g).slice(-1)[0].replace(/[']+/g,"");if(column=="email"){return next(new AuthError.EmailTakenError(400))}else if(column=="username"){return next(new AuthError.UsernameTakenError(400))}else if(column=="phone"){return next(new AuthError.PhoneTakenError(400))}}return next(new AuthError.Register(500))})});router.post("/login",rateLimiter.authenticationLimiter,authentication.localAuth,function(req,res){const user=req.user;const token=authentication.generateToken(user);res.status(200).json({jwt:{token:token,expiresIn:7},account:user})});router.post("/login/facebook",rateLimiter.authenticationLimiter,function(req,res,next){const{accessToken}=req.body;if(!req.body){return next(new AuthError.FacebookSignUpError(500))}authentication.getFacebookDetails(accessToken).then(facebookDetails=>{accounts.getFacebookAccount(facebookDetails.body.id).then(async user=>{if(user.length==0){const username=await authentication.createUsernameFromEmail(facebookDetails.body.email);let email=facebookDetails.body.email;await accounts.getAccountByEmail(email).then(rows=>{if(rows.length>0){email=null}},err=>{});accounts.addFacebookAccount(facebookDetails.body.id,email,username).then(user2=>{accounts.addAccountMetadata(user2[0].id).then(rows=>{user2=user2[0];const token=authentication.generateToken(user2);friendsService.addFacebookFriends(accessToken,user2.id).then(friends=>{res.status(200).json({created:true,jwt:{token:token,expiresIn:7},account:user2})},err=>{res.status(200).json({created:true,jwt:{token:token,expiresIn:7},account:user2})})},err=>{return next(new AuthError.FacebookSignUpError(500))})},err=>{return next(new AuthError.FacebookSignUpError(500))})}else{user=user[0];const token=authentication.generateToken(user);res.status(200).json({created:false,jwt:{token:token,expiresIn:7},account:user})}},err=>{return next(new AuthError.FacebookSignUpError(500))})},err=>{return next(new AuthError.FacebookSignUpError(500))})});router.post("/login/google",rateLimiter.authenticationLimiter,ErrorHandler.catchAsync(async function(req,res,next){const{accessToken}=req.body;try{const ticket=await authentication.verifyGoogleIdToken(accessToken);const payload=ticket.getPayload();const userid=payload["sub"];let email=payload["email"];await accounts.getAccountByEmail(email).then(rows=>{if(rows.length>0){email=null}},err=>{});accounts.getGoogleAccount(userid).then(async user=>{if(user.length==0){const username=await authentication.createUsernameFromEmail(email);accounts.addGoogleAccount(userid,email,username).then(user2=>{accounts.addAccountMetadata(user2[0].id).then(rows=>{user2=user2[0];const token=authentication.generateToken(user2);res.status(200).json({created:true,jwt:{token:token,expiresIn:7},account:user2})},err=>{return next(new AuthError.GoogleSignUpError(500))})},err=>{return next(new AuthError.GoogleSignUpError(500))})}else{user=user[0];const token=authentication.generateToken(user);res.status(200).json({created:false,jwt:{token:token,expiresIn:7},account:user})}},err=>{return next(new AuthError.GoogleSignUpError(500))})}catch(err){return next(new AuthError.GoogleSignUpError(500))}}));router.post("/password-reset",rateLimiter.passwordResetLimiter,function(req,res,next){const{email}=req.body;accounts.getAccountByEmail(email).then(async rows=>{if(rows.length>0){const token=shortid.generate();await mail.email.send({template:"password",message:{from:"spottables.app@gmail.com",to:rows[0].email},locals:{link:"https://spottables.com/new-password",token:token.toString(),username:rows[0].username}});console.log("meex2");passwordReset.addPasswordReset(rows[0].id,token).then(r=>{res.status(200).send({})},err=>{return next(new AuthError.PasswordReset(500))})}else{res.status(200).send({})}},err=>{return next(new AuthError.PasswordReset(500))})});router.post("/new-password/validate",rateLimiter.tokenLimiter,function(req,res,next){const{token}=req.body;passwordReset.getByToken(token).then(rows=>{if(rows.length>0){if(authentication.isValidToken(rows[0])){res.status(200).send({token:token,valid:true})}else{return next(new AuthError.PasswordResetValidate(400))}}else{return next(new AuthError.PasswordResetValidate(400))}},err=>{return next(new AuthError.PasswordResetValidate(400))})});router.post("/new-password",rateLimiter.newPasswordLimiter,function(req,res,next){const{password,token}=req.body;passwordReset.getByToken(token).then(rows=>{if(rows.length>0&&authentication.isValidToken(rows[0])){const passwordError=authentication.validPassword(password);if(passwordError){return next(passwordError)}const salt=authentication.generateSalt();const hash=authentication.hashPassword(password,salt);accounts.getAccountById(rows[0].account_id).then(users=>{if(authorization.checkRole(users[0],[roles.guest])){return next(new AuthError.NewPassword(500))}accounts.changePassword(rows[0].account_id,hash,salt).then(r=>{res.status(200).send({reset:true})},err=>{return next(new AuthError.NewPassword(500))})},err=>{return next(new AuthError.NewPassword(500))})}else{return next(new AuthError.NewPassword(500))}},err=>{return next(new AuthError.NewPassword(500))})});export default router;
//# sourceMappingURL=authentication.js.map