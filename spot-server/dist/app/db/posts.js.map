{"version":3,"sources":["../../../src/app/db/posts.ts"],"names":["getPosts","getPostById","addPost","likePost","dislikePost","deletePost","getPostCreator","getPostByLink","getPostsActivity","getPostByIdNoAccount","linkExists","unratedPost","checkOwned","updateNsfw","uuid","query","POSTS_CONSTANTS","accountId","sort","location","latitude","longitude","offset","limit","date","distance","values","selectSql","concat","locationSql","dateSql","Date","groupSql","sortSql","limitOffsetSql","sql","postId","content","imageSrc","imageNsfw","link","geolocation","then","rows","v4","id","before","after","activityDate","setDate","getDate","ACTIVITY_DAYS","push","length","nsfw"],"mappings":"AAAA,cAAe,CACbA,QADa,CAEbC,WAFa,CAGbC,OAHa,CAIbC,QAJa,CAKbC,WALa,CAMbC,UANa,CAObC,cAPa,CAQbC,aARa,CASbC,gBATa,CAUbC,oBAVa,CAWbC,UAXa,CAYbC,WAZa,CAabC,UAba,CAcbC,UAda,CAAf,CAiBA,MAAOC,CAAAA,IAAP,KAAiB,MAAjB,CACA,OAASC,KAAT,KAAsB,WAAtB,CAEA,OAASC,eAAT,KAAgC,kBAAhC,CAEA,QAAShB,CAAAA,QAAT,CACEiB,SADF,CAEEC,IAFF,CAGEC,QAHF,CAIEC,QAJF,CAKEC,SALF,CAMEC,MANF,CAOEC,KAPF,CAQEC,IARF,CASgB,CAId,KAAMC,CAAAA,QAAQ,CAAG,EAAjB,CAEA,GAAIC,CAAAA,MAAa,CAAG,EAApB,CACA,KAAMC,CAAAA,SAAS,CAAI;AACrB;AACA;AACA;AACA;AACA;AACA,wHANE,CAQAD,MAAM,CAAGA,MAAM,CAACE,MAAP,CAAc,CAACX,SAAD,CAAYA,SAAZ,CAAuBA,SAAvB,CAAd,CAAT,CACA,GAAIY,CAAAA,WAAJ,CACA,GAAIV,QAAQ,GAAK,OAAjB,CAA0B,CACxBU,WAAW,CAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCARI,CASAH,MAAM,CAAGA,MAAM,CAACE,MAAP,CAAc,CAACR,QAAD,CAAWC,SAAX,CAAsBD,QAAtB,CAAgCK,QAAhC,CAAd,CACV,CAXD,IAWO,CACLI,WAAW,CAAG,EACf,CAED,GAAIC,CAAAA,OAAO,CAAG,EAAd,CACA,GAAIZ,IAAI,GAAK,KAAb,CAAoB,CAClBY,OAAO,CAAG,8BAAV,CACAJ,MAAM,CAAGA,MAAM,CAACE,MAAP,CAAc,CAAC,GAAIG,CAAAA,IAAJ,CAASP,IAAT,CAAD,CAAd,CACV,CAED,KAAMQ,CAAAA,QAAQ,CAAG,mBAAjB,CAEA,GAAIC,CAAAA,OAAJ,CACA,GAAIf,IAAI,GAAK,KAAb,CAAoB,CAClBe,OAAO,CAAG,oCACX,CAFD,IAEO,CACLA,OAAO,CACL,6MACH,CAED,GAAIC,CAAAA,cAAJ,CACA,GAAIZ,MAAJ,CAAY,CACVY,cAAc,CAAG,mBAAjB,CACAR,MAAM,CAAGA,MAAM,CAACE,MAAP,CAAc,CAACL,KAAD,CAAQD,MAAR,CAAd,CACV,CAHD,IAGO,CACLY,cAAc,CAAG,UAAjB,CACAR,MAAM,CAAGA,MAAM,CAACE,MAAP,CAAc,CAACL,KAAD,CAAd,CACV,CAED,KAAMY,CAAAA,GAAG,CACPR,SAAS,CAAGE,WAAZ,CAA0BC,OAA1B,CAAoCE,QAApC,CAA+CC,OAA/C,CAAyDC,cAD3D,CAGA,MAAOnB,CAAAA,KAAK,CAACoB,GAAD,CAAMT,MAAN,CACb,CAED,QAASzB,CAAAA,WAAT,CAAqBmC,MAArB,CAAqCnB,SAArC,CAAsE,CACpE,KAAMkB,CAAAA,GAAG,CAAI;AACf;AACA;AACA;AACA;AACA;AACA,4LANE,CAOA,KAAMT,CAAAA,MAAM,CAAG,CAACT,SAAD,CAAYA,SAAZ,CAAuBA,SAAvB,CAAkCmB,MAAlC,CAAf,CACA,MAAOrB,CAAAA,KAAK,CAACoB,GAAD,CAAMT,MAAN,CACb,CAED,QAASjB,CAAAA,oBAAT,CAA8B2B,MAA9B,CAA4D,CAC1D,KAAMD,CAAAA,GAAG,CAAI;AACf;AACA,4LAFE,CAGA,KAAMT,CAAAA,MAAM,CAAG,CAACU,MAAD,CAAf,CACA,MAAOrB,CAAAA,KAAK,CAACoB,GAAD,CAAMT,MAAN,CACb,CAED,QAASxB,CAAAA,OAAT,CACEkC,MADF,CAEEC,OAFF,CAGElB,QAHF,CAIEmB,QAJF,CAKEC,SALF,CAMEC,IANF,CAOEvB,SAPF,CAQEwB,WARF,CASgB,CACd,KAAMN,CAAAA,GAAG,CAAI;AACf,mHADE,CAEA,KAAMT,CAAAA,MAAM,CAAG,CACbU,MADa,CAEb,GAAIL,CAAAA,IAFS,CAGbd,SAHa,CAIbE,QAAQ,CAACE,SAJI,CAKbF,QAAQ,CAACC,QALI,CAMbiB,OANa,CAObG,IAPa,CAQbF,QARa,CASbC,SATa,CAUb,CAVa,CAWb,CAXa,CAYb,CAZa,CAabE,WAba,CAAf,CAeA,MAAO1B,CAAAA,KAAK,CAACoB,GAAD,CAAMT,MAAN,CAAL,CAAmBgB,IAAnB,CAAyBC,IAAD,EAAe,CAC5C,MAAO1C,CAAAA,WAAW,CAACmC,MAAD,CAASnB,SAAT,CACnB,CAFM,CAGR,CAED,QAASd,CAAAA,QAAT,CAAkBiC,MAAlB,CAAkCnB,SAAlC,CAAmE,CACjE,KAAMkB,CAAAA,GAAG,CACP,mHADF,CAEA,KAAMT,CAAAA,MAAM,CAAG,CAACZ,IAAI,CAAC8B,EAAL,EAAD,CAAYR,MAAZ,CAAoBnB,SAApB,CAA+B,CAA/B,CAAf,CACA,MAAOF,CAAAA,KAAK,CAACoB,GAAD,CAAMT,MAAN,CACb,CAED,QAAStB,CAAAA,WAAT,CAAqBgC,MAArB,CAAqCnB,SAArC,CAAsE,CACpE,KAAMkB,CAAAA,GAAG,CACP,mHADF,CAEA,KAAMT,CAAAA,MAAM,CAAG,CAACZ,IAAI,CAAC8B,EAAL,EAAD,CAAYR,MAAZ,CAAoBnB,SAApB,CAA+B,CAA/B,CAAf,CACA,MAAOF,CAAAA,KAAK,CAACoB,GAAD,CAAMT,MAAN,CACb,CAED,QAASf,CAAAA,WAAT,CAAqByB,MAArB,CAAqCnB,SAArC,CAAsE,CACpE,KAAMkB,CAAAA,GAAG,CAAG,+DAAZ,CACA,KAAMT,CAAAA,MAAM,CAAG,CAACU,MAAD,CAASnB,SAAT,CAAf,CACA,MAAOF,CAAAA,KAAK,CAACoB,GAAD,CAAMT,MAAN,CACb,CAED,QAASrB,CAAAA,UAAT,CAAoBwC,EAApB,CAA8C,CAC5C,KAAMV,CAAAA,GAAG,CAAG,iDAAZ,CACA,KAAMT,CAAAA,MAAM,CAAG,CAAC,GAAIK,CAAAA,IAAL,CAAac,EAAb,CAAf,CACA,MAAO9B,CAAAA,KAAK,CAACoB,GAAD,CAAMT,MAAN,CACb,CAED,QAASpB,CAAAA,cAAT,CAAwB8B,MAAxB,CAAwC,CACtC,KAAMD,CAAAA,GAAG,CAAG,2CAAZ,CACA,KAAMT,CAAAA,MAAM,CAAG,CAACU,MAAD,CAAf,CACA,MAAOrB,CAAAA,KAAK,CAACoB,GAAD,CAAMT,MAAN,CACb,CAED,QAASnB,CAAAA,aAAT,CAAuBiC,IAAvB,CAAqCvB,SAArC,CAAyD,CACvD,KAAMkB,CAAAA,GAAG,CAAG,qCAAZ,CACA,KAAMT,CAAAA,MAAM,CAAG,CAACc,IAAD,CAAf,CAEA,GAAIvB,SAAJ,CAAe,CACb,MAAOF,CAAAA,KAAK,CAACoB,GAAD,CAAMT,MAAN,CAAL,CAAmBgB,IAAnB,CAAyBC,IAAD,EAAe,CAC5C,MAAO1C,CAAAA,WAAW,CAAC0C,IAAI,CAAC,CAAD,CAAJ,CAAQE,EAAT,CAAa5B,SAAb,CACnB,CAFM,CAGR,CAJD,IAIO,CACL,MAAOF,CAAAA,KAAK,CAACoB,GAAD,CAAMT,MAAN,CAAL,CAAmBgB,IAAnB,CAAyBC,IAAD,EAAe,CAC5C,MAAOlC,CAAAA,oBAAoB,CAACkC,IAAI,CAAC,CAAD,CAAJ,CAAQE,EAAT,CAC5B,CAFM,CAGR,CACF,CAGD,QAASrC,CAAAA,gBAAT,CACES,SADF,CAEE6B,MAFF,CAGEC,KAHF,CAIExB,KAJF,CAKE,CACA,KAAMyB,CAAAA,YAAY,CAAG,GAAIjB,CAAAA,IAAzB,CACAiB,YAAY,CAACC,OAAb,CAAqBD,YAAY,CAACE,OAAb,GAAyBlC,eAAe,CAACmC,aAA9D,EACA,GAAIhB,CAAAA,GAAG,CAAI;AACb;AACA,qFAFE,CAGA,KAAMT,CAAAA,MAAa,CAAG,CAACT,SAAD,CAAY+B,YAAZ,CAAtB,CACA,GAAID,KAAJ,CAAW,CACTZ,GAAG,EAAI,wBAAP,CACAT,MAAM,CAAC0B,IAAP,CAAYL,KAAZ,CACD,CACD,GAAID,MAAJ,CAAY,CACVX,GAAG,EAAI,wBAAP,CACAT,MAAM,CAAC0B,IAAP,CAAYN,MAAZ,CACD,CACDX,GAAG,EAAK,sCAAR,CACAT,MAAM,CAAC0B,IAAP,CAAY7B,KAAZ,EACA,MAAOR,CAAAA,KAAK,CAACoB,GAAD,CAAMT,MAAN,CACb,CAGD,QAAShB,CAAAA,UAAT,CAAoB8B,IAApB,CAAkC,CAChC,KAAML,CAAAA,GAAG,CAAG,uCAAZ,CACA,KAAMT,CAAAA,MAAM,CAAG,CAACc,IAAD,CAAf,CAEA,MAAOzB,CAAAA,KAAK,CAACoB,GAAD,CAAMT,MAAN,CAAL,CAAmBgB,IAAnB,CAAyBF,IAAD,EAAe,CAC5C,MAAOA,CAAAA,IAAI,CAACa,MAAL,CAAc,CACtB,CAFM,CAGR,CAED,QAASzC,CAAAA,UAAT,CAAoBwB,MAApB,CAAoCnB,SAApC,CAAuD,CACrD,KAAMkB,CAAAA,GAAG,CAAG,4DAAZ,CACA,KAAMT,CAAAA,MAAM,CAAG,CAACU,MAAD,CAASnB,SAAT,CAAf,CAEA,MAAOF,CAAAA,KAAK,CAACoB,GAAD,CAAMT,MAAN,CAAL,CAAmBgB,IAAnB,CAAyBC,IAAD,EAAe,CAC5C,MAAOA,CAAAA,IAAI,CAACU,MAAL,CAAc,CACtB,CAFM,CAGR,CAED,QAASxC,CAAAA,UAAT,CAAoBuB,MAApB,CAAoCkB,IAApC,CAAmD,CACjD,KAAMnB,CAAAA,GAAG,CAAG,8CAAZ,CACA,KAAMT,CAAAA,MAAM,CAAG,CAAC4B,IAAD,CAAOlB,MAAP,CAAf,CAEA,MAAOrB,CAAAA,KAAK,CAACoB,GAAD,CAAMT,MAAN,CACb","sourcesContent":["export default {\n  getPosts,\n  getPostById,\n  addPost,\n  likePost,\n  dislikePost,\n  deletePost,\n  getPostCreator,\n  getPostByLink,\n  getPostsActivity,\n  getPostByIdNoAccount,\n  linkExists,\n  unratedPost,\n  checkOwned,\n  updateNsfw\n};\n\nimport uuid from 'uuid';\nimport { query } from '@db/mySql';\n\nimport { POSTS_CONSTANTS } from '@constants/posts';\n\nfunction getPosts(\n  accountId: string,\n  sort: string,\n  location: string,\n  latitude: number,\n  longitude: number,\n  offset: number,\n  limit: number,\n  date: string\n): Promise<any> {\n  // TODO: life is filled with regrets, this is one of them\n\n  // 10 miles if location === local\n  const distance = 10;\n\n  let values: any[] = [];\n  const selectSql = `SELECT posts.id, posts.creation_date, posts.longitude, posts.latitude, posts.content, posts.link, posts.image_src,\n                        posts.image_nsfw, posts.likes, posts.dislikes, posts.comments, posts.geolocation,\n                (CASE WHEN ( SELECT rating FROM posts_rating WHERE post_id = posts.id AND account_id = ? ) = 1 THEN 1 \n                      WHEN ( SELECT rating FROM posts_rating WHERE post_id = posts.id AND account_id = ? ) = 0 THEN 0\n                      ELSE NULL END) AS rated,\n                (CASE WHEN posts.account_id = ? THEN 1 ELSE 0 END) AS owned\n                FROM posts LEFT JOIN posts_rating ON posts.id = posts_rating.post_id WHERE posts.deletion_date IS NULL `;\n\n  values = values.concat([accountId, accountId, accountId]);\n  let locationSql;\n  if (location === 'local') {\n    locationSql = `AND (\n                            3959 * acos (\n                            cos ( radians( ? ) )\n                            * cos( radians( posts.latitude ) )\n                            * cos( radians( posts.longitude ) - radians( ? ) )\n                            + sin ( radians( ? ) )\n                            * sin( radians( posts.latitude ) )\n                            )\n                          ) < ? `;\n    values = values.concat([latitude, longitude, latitude, distance]);\n  } else {\n    locationSql = '';\n  }\n\n  let dateSql = '';\n  if (sort === 'new') {\n    dateSql = 'AND posts.creation_date < ? ';\n    values = values.concat([new Date(date)]);\n  }\n\n  const groupSql = 'GROUP BY posts.id';\n\n  let sortSql;\n  if (sort === 'new') {\n    sortSql = ' ORDER BY posts.creation_date DESC';\n  } else {\n    sortSql =\n      ' ORDER BY IF( likes - dislikes >= 0, IF( likes - dislikes > 0, 1, 0 ), -1 ) * ( LOG( 10, GREATEST( ABS( likes - dislikes ), 1 ) ) + ( ( UNIX_TIMESTAMP(posts.creation_date) - 1134028003 ) / 45000 ) ) DESC';\n  }\n\n  let limitOffsetSql;\n  if (offset) {\n    limitOffsetSql = ' LIMIT ? OFFSET ?';\n    values = values.concat([limit, offset]);\n  } else {\n    limitOffsetSql = ' LIMIT ?';\n    values = values.concat([limit]);\n  }\n\n  const sql =\n    selectSql + locationSql + dateSql + groupSql + sortSql + limitOffsetSql;\n\n  return query(sql, values);\n}\n\nfunction getPostById(postId: string, accountId: string): Promise<any> {\n  const sql = `SELECT posts.id, posts.creation_date, posts.longitude, posts.latitude, posts.content, posts.link, posts.image_src,\n                    posts.image_nsfw, posts.likes, posts.dislikes, posts.comments, posts.geolocation,\n                (CASE WHEN ( SELECT rating FROM posts_rating WHERE post_id = posts.id AND account_id = ? ) = 1 THEN 1 \n                    WHEN ( SELECT rating FROM posts_rating WHERE post_id = posts.id AND account_id = ? ) = 0 THEN 0\n                    ELSE NULL END) AS rated,\n                (CASE WHEN posts.account_id = ? THEN 1 ELSE 0 END) AS owned\n                FROM posts LEFT JOIN posts_rating ON posts.id = posts_rating.post_id WHERE posts.id = ? AND posts.deletion_date IS NULL GROUP BY posts.id ORDER BY posts.creation_date DESC`;\n  const values = [accountId, accountId, accountId, postId];\n  return query(sql, values);\n}\n\nfunction getPostByIdNoAccount(postId: string): Promise<any> {\n  const sql = `SELECT posts.id, posts.creation_date, posts.longitude, posts.latitude, posts.content, posts.link, posts.image_src,\n                    posts.image_nsfw, posts.likes, posts.dislikes, posts.comments, posts.geolocation\n                FROM posts LEFT JOIN posts_rating ON posts.id = posts_rating.post_id WHERE posts.id = ? AND posts.deletion_date IS NULL GROUP BY posts.id ORDER BY posts.creation_date DESC`;\n  const values = [postId];\n  return query(sql, values);\n}\n\nfunction addPost(\n  postId: string,\n  content: string,\n  location: any,\n  imageSrc: string,\n  imageNsfw: boolean,\n  link: string,\n  accountId: string,\n  geolocation: string\n): Promise<any> {\n  const sql = `INSERT INTO posts (id, creation_date, account_id, longitude, latitude, content, link, image_src, \n                image_nsfw, likes, dislikes, comments, geolocation) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`;\n  const values = [\n    postId,\n    new Date(),\n    accountId,\n    location.longitude,\n    location.latitude,\n    content,\n    link,\n    imageSrc,\n    imageNsfw,\n    0,\n    0,\n    0,\n    geolocation\n  ];\n  return query(sql, values).then((rows: any) => {\n    return getPostById(postId, accountId);\n  });\n}\n\nfunction likePost(postId: string, accountId: string): Promise<any> {\n  const sql =\n    'INSERT INTO posts_rating (id, post_id, account_id, rating) VALUES (?, ?, ?, ?) ON DUPLICATE KEY UPDATE rating = 1';\n  const values = [uuid.v4(), postId, accountId, 1];\n  return query(sql, values);\n}\n\nfunction dislikePost(postId: string, accountId: string): Promise<any> {\n  const sql =\n    'INSERT INTO posts_rating (id, post_id, account_id, rating) VALUES (?, ?, ?, ?) ON DUPLICATE KEY UPDATE rating = 0';\n  const values = [uuid.v4(), postId, accountId, 0];\n  return query(sql, values);\n}\n\nfunction unratedPost(postId: string, accountId: string): Promise<any> {\n  const sql = 'DELETE FROM posts_rating WHERE post_id = ? AND account_id = ?';\n  const values = [postId, accountId];\n  return query(sql, values);\n}\n\nfunction deletePost(id: string): Promise<any> {\n  const sql = 'UPDATE posts SET deletion_date = ? WHERE id = ?';\n  const values = [new Date(), id];\n  return query(sql, values);\n}\n\nfunction getPostCreator(postId: string) {\n  const sql = 'SELECT account_id from posts WHERE id = ?';\n  const values = [postId];\n  return query(sql, values);\n}\n\nfunction getPostByLink(link: string, accountId?: string) {\n  const sql = 'SELECT id FROM posts WHERE link = ?';\n  const values = [link];\n\n  if (accountId) {\n    return query(sql, values).then((rows: any) => {\n      return getPostById(rows[0].id, accountId);\n    });\n  } else {\n    return query(sql, values).then((rows: any) => {\n      return getPostByIdNoAccount(rows[0].id);\n    });\n  }\n}\n\n// Activity\nfunction getPostsActivity(\n  accountId: string,\n  before: Date | null,\n  after: Date | null,\n  limit: number\n) {\n  const activityDate = new Date();\n  activityDate.setDate(activityDate.getDate() - POSTS_CONSTANTS.ACTIVITY_DAYS);\n  let sql = `SELECT id, creation_date, longitude, latitude, geolocation, content,\n                link, image_src, image_nsfw, likes, dislikes, comments FROM posts\n                WHERE account_id = ? AND creation_date > ? AND deletion_date IS NULL`;\n  const values: any[] = [accountId, activityDate];\n  if (after) {\n    sql += ' AND creation_date < ?';\n    values.push(after);\n  }\n  if (before) {\n    sql += ' AND creation_date > ?';\n    values.push(before);\n  }\n  sql += ` ORDER BY creation_date DESC LIMIT ?`;\n  values.push(limit);\n  return query(sql, values);\n}\n\n// Check existance\nfunction linkExists(link: string) {\n  const sql = 'SELECT link FROM posts WHERE link = ?';\n  const values = [link];\n\n  return query(sql, values).then((link: any) => {\n    return link.length > 0;\n  });\n}\n\nfunction checkOwned(postId: string, accountId: string) {\n  const sql = 'SELECT count(*) FROM posts WHERE id = ? AND account_id = ?';\n  const values = [postId, accountId];\n\n  return query(sql, values).then((rows: any) => {\n    return rows.length > 0;\n  });\n}\n\nfunction updateNsfw(postId: string, nsfw: boolean) {\n  const sql = 'UPDATE posts SET image_nsfw = ? WHERE id = ?';\n  const values = [nsfw, postId];\n\n  return query(sql, values);\n}\n"],"file":"posts.js"}