{"version":3,"sources":["../../../src/app/db/comments.ts"],"names":["addComment","deleteCommentById","deleteReplyByParentId","getCommentByPostId","getNumberOfRepliesForCommentAfterDate","getNumberOfRepliesForComment","addReply","getRepliesByCommentId","getNumberOfCommentsForPost","getRepliesUpToDate","likeComment","dislikeComment","getCommentsActivity","getCommentById","getCommentByLink","getNumberOfCommentsForPostAfterDate","getNumberOfCommentsForPostBeforeDate","getCommentByPostIdNoAccount","getCommentByIdNoAccount","linkExists","unratedComment","checkOwned","updateNsfw","uuid","query","COMMENTS_CONSTANTS","commentId","accountId","sql","values","postId","date","limit","type","selectSql","accountSql","accountValues","joinSql","orderSql","concat","Date","content","image","imageNsfw","link","commentParentId","then","rows","parentId","replyId","replyValues","dateSql","v4","before","after","activityDate","setDate","getDate","ACTIVITY_DAYS","push","id","length","nsfw"],"mappings":"AAAA,cAAe,CACbA,UADa,CAEbC,iBAFa,CAGbC,qBAHa,CAIbC,kBAJa,CAKbC,qCALa,CAMbC,4BANa,CAObC,QAPa,CAQbC,qBARa,CASbC,0BATa,CAUbC,kBAVa,CAWbC,WAXa,CAYbC,cAZa,CAabC,mBAba,CAcbC,cAda,CAebC,gBAfa,CAgBbC,mCAhBa,CAiBbC,oCAjBa,CAkBbC,2BAlBa,CAmBbC,uBAnBa,CAoBbC,UApBa,CAqBbC,cArBa,CAsBbC,UAtBa,CAuBbC,UAvBa,CAAf,CA0BA,MAAOC,CAAAA,IAAP,KAAiB,MAAjB,CAGA,OAASC,KAAT,KAAsB,WAAtB,CAGA,OAASC,kBAAT,KAAmC,qBAAnC,CAGA,QAASZ,CAAAA,cAAT,CAAwBa,SAAxB,CAA2CC,SAA3C,CAA4E,CAC1E,KAAMC,CAAAA,GAAG,CAAI;AACf;AACA;AACA;AACA;AACA;AACA;AACA,sFAPE,CAQA,KAAMC,CAAAA,MAAM,CAAG,CAACF,SAAD,CAAYA,SAAZ,CAAuBA,SAAvB,CAAkCD,SAAlC,CAAf,CACA,MAAOF,CAAAA,KAAK,CAACI,GAAD,CAAMC,MAAN,CACb,CAED,QAASX,CAAAA,uBAAT,CAAiCQ,SAAjC,CAAkE,CAChE,KAAME,CAAAA,GAAG,CAAI;AACf;AACA;AACA,sFAHE,CAIA,KAAMC,CAAAA,MAAM,CAAG,CAACH,SAAD,CAAf,CACA,MAAOF,CAAAA,KAAK,CAACI,GAAD,CAAMC,MAAN,CACb,CAID,QAAS1B,CAAAA,kBAAT,CACE2B,MADF,CAEEC,IAFF,CAGEC,KAHF,CAIEC,IAJF,CAKEN,SALF,CAMgB,CACd,KAAMO,CAAAA,SAAS,CAAI;AACrB,8FADE,CAGA,GAAIC,CAAAA,UAAU,CAAG,EAAjB,CACA,GAAIC,CAAAA,aAAoB,CAAG,EAA3B,CACA,GAAIT,SAAJ,CAAe,CACbQ,UAAU,CAAI;AAClB;AACA;AACA,uFAHI,CAIAC,aAAa,CAAG,CAACT,SAAD,CAAYA,SAAZ,CAAuBA,SAAvB,CACjB,CAED,KAAMU,CAAAA,OAAO,CAAI;AACnB,sHADE,CAGA,GAAIC,CAAAA,QAAJ,CACA,GAAIL,IAAI,EAAI,OAAZ,CAAqB,CACnBK,QAAQ,CAAI,mGACb,CAFD,IAEO,CACLA,QAAQ,CAAI,qGACb,CAED,KAAMV,CAAAA,GAAG,CAAGM,SAAS,CAAGC,UAAZ,CAAyBE,OAAzB,CAAmCC,QAA/C,CACA,KAAMT,CAAAA,MAAM,CAAGO,aAAa,CAACG,MAAd,CAAqB,CAACT,MAAD,CAAS,GAAIU,CAAAA,IAAJ,CAAST,IAAT,CAAT,CAAyBC,KAAzB,CAArB,CAAf,CACA,MAAOR,CAAAA,KAAK,CAACI,GAAD,CAAMC,MAAN,CACb,CAED,QAASZ,CAAAA,2BAAT,CACEa,MADF,CAEEC,IAFF,CAGEC,KAHF,CAIEC,IAJF,CAKgB,CACd,KAAMC,CAAAA,SAAS,CAAI;AACrB;AACA;AACA,sGAHE,CAKA,GAAII,CAAAA,QAAJ,CACA,GAAIL,IAAI,EAAI,OAAZ,CAAqB,CACnBK,QAAQ,CAAI,mGACb,CAFD,IAEO,CACLA,QAAQ,CAAI,qGACb,CAED,KAAMV,CAAAA,GAAG,CAAGM,SAAS,CAAGI,QAAxB,CACA,KAAMT,CAAAA,MAAM,CAAG,CAACC,MAAD,CAAS,GAAIU,CAAAA,IAAJ,CAAST,IAAT,CAAT,CAAyBC,KAAzB,CAAf,CACA,MAAOR,CAAAA,KAAK,CAACI,GAAD,CAAMC,MAAN,CACb,CAED,QAAS7B,CAAAA,UAAT,CACE0B,SADF,CAEEI,MAFF,CAGEH,SAHF,CAIEc,OAJF,CAKEC,KALF,CAMEC,SANF,CAOEC,IAPF,CAQEC,eARF,CASgB,CAEd,KAAMjB,CAAAA,GAAG,CACP,kLADF,CAEA,KAAMC,CAAAA,MAAM,CAAG,CACbH,SADa,CAEbI,MAFa,CAGbH,SAHa,CAIb,GAAIa,CAAAA,IAJS,CAKbK,eALa,CAMbJ,OANa,CAObG,IAPa,CAQbF,KARa,CASbC,SATa,CAUb,CAVa,CAWb,CAXa,CAAf,CAaA,MAAOnB,CAAAA,KAAK,CAACI,GAAD,CAAMC,MAAN,CAAL,CAAmBiB,IAAnB,CAAyBC,IAAD,EAAe,CAC5C,MAAOlC,CAAAA,cAAc,CAACa,SAAD,CAAYC,SAAZ,CACtB,CAFM,CAGR,CAED,QAAS1B,CAAAA,iBAAT,CAA2ByB,SAA3B,CAA4D,CAC1D,KAAME,CAAAA,GAAG,CAAG,oDAAZ,CACA,KAAMC,CAAAA,MAAM,CAAG,CAAC,GAAIW,CAAAA,IAAL,CAAad,SAAb,CAAf,CACA,MAAOF,CAAAA,KAAK,CAACI,GAAD,CAAMC,MAAN,CACb,CAED,QAAS3B,CAAAA,qBAAT,CAA+B8C,QAA/B,CAA+D,CAC7D,KAAMpB,CAAAA,GAAG,CAAG,2DAAZ,CACA,KAAMC,CAAAA,MAAM,CAAG,CAAC,GAAIW,CAAAA,IAAL,CAAaQ,QAAb,CAAf,CACA,MAAOxB,CAAAA,KAAK,CAACI,GAAD,CAAMC,MAAN,CACb,CAGD,QAASvB,CAAAA,QAAT,CACE2C,OADF,CAEEnB,MAFF,CAGEJ,SAHF,CAIEmB,eAJF,CAKElB,SALF,CAMEc,OANF,CAOEC,KAPF,CAQEC,SARF,CASEC,IATF,CAUgB,CACd,KAAMhB,CAAAA,GAAG,CACP,gMADF,CAEA,KAAMC,CAAAA,MAAM,CAAG,CACboB,OADa,CAEbnB,MAFa,CAGbJ,SAHa,CAIbmB,eAJa,CAKblB,SALa,CAMb,GAAIa,CAAAA,IANS,CAObC,OAPa,CAQbG,IARa,CASbF,KATa,CAUbC,SAVa,CAWb,CAXa,CAYb,CAZa,CAAf,CAcA,MAAOnB,CAAAA,KAAK,CAACI,GAAD,CAAMC,MAAN,CAAL,CAAmBiB,IAAnB,CAAyBC,IAAD,EAAe,CAC5C,MAAOlC,CAAAA,cAAc,CAACoC,OAAD,CAAUtB,SAAV,CACtB,CAFM,CAGR,CAGD,QAASpB,CAAAA,qBAAT,CACEuB,MADF,CAEEJ,SAFF,CAGEK,IAHF,CAIEC,KAJF,CAKEL,SALF,CAMgB,CACd,KAAMO,CAAAA,SAAS,CAAI;AACrB,8FADE,CAGA,GAAIC,CAAAA,UAAU,CAAG,EAAjB,CACA,GAAIe,CAAAA,WAAkB,CAAG,EAAzB,CACA,GAAIvB,SAAJ,CAAe,CACbQ,UAAU,CAAI;AAClB;AACA;AACA,uFAHI,CAIAe,WAAW,CAAGA,WAAW,CAACX,MAAZ,CAAmB,CAACZ,SAAD,CAAYA,SAAZ,CAAuBA,SAAvB,CAAnB,CACf,CAED,KAAMU,CAAAA,OAAO,CAAI;AACnB,8GADE,CAEAa,WAAW,CAAGA,WAAW,CAACX,MAAZ,CAAmB,CAACT,MAAD,CAASJ,SAAT,CAAnB,CAAd,CAEA,GAAIyB,CAAAA,OAAO,CAAI,EAAf,CACA,GAAIpB,IAAJ,CAAU,CACRoB,OAAO,CAAI,iCAAX,CACAD,WAAW,CAAGA,WAAW,CAACX,MAAZ,CAAmB,CAAC,GAAIC,CAAAA,IAAJ,CAAST,IAAT,CAAD,CAAnB,CACf,CAED,KAAMO,CAAAA,QAAQ,CAAI,kEAAlB,CACA,KAAMV,CAAAA,GAAG,CAAGM,SAAS,CAAGC,UAAZ,CAAyBE,OAAzB,CAAmCc,OAAnC,CAA6Cb,QAAzD,CACAY,WAAW,CAAGA,WAAW,CAACX,MAAZ,CAAmB,CAACP,KAAD,CAAnB,CAAd,CACA,MAAOR,CAAAA,KAAK,CAACI,GAAD,CAAMsB,WAAN,CACb,CAGD,QAASzC,CAAAA,kBAAT,CACEqB,MADF,CAEEJ,SAFF,CAGEK,IAHF,CAIEJ,SAJF,CAKgB,CACd,KAAMO,CAAAA,SAAS,CAAI;AACrB,8FADE,CAGA,GAAIC,CAAAA,UAAU,CAAG,EAAjB,CACA,GAAIN,CAAAA,MAAa,CAAG,EAApB,CACA,GAAIF,SAAJ,CAAe,CACbQ,UAAU,CAAI;AAClB;AACA;AACA,uFAHI,CAIAN,MAAM,CAAGA,MAAM,CAACU,MAAP,CAAc,CAACZ,SAAD,CAAYA,SAAZ,CAAuBA,SAAvB,CAAd,CACV,CAED,KAAMU,CAAAA,OAAO,CAAI;AACnB,8GADE,CAEAR,MAAM,CAAGA,MAAM,CAACU,MAAP,CAAc,CAACT,MAAD,CAASJ,SAAT,CAAd,CAAT,CAEA,KAAMyB,CAAAA,OAAO,CAAI,kCAAjB,CACAtB,MAAM,CAAGA,MAAM,CAACU,MAAP,CAAc,CAAC,GAAIC,CAAAA,IAAJ,CAAST,IAAT,CAAD,CAAd,CAAT,CAEA,KAAMO,CAAAA,QAAQ,CAAI,0DAAlB,CACA,KAAMV,CAAAA,GAAG,CAAGM,SAAS,CAAGC,UAAZ,CAAyBE,OAAzB,CAAmCc,OAAnC,CAA6Cb,QAAzD,CACA,MAAOd,CAAAA,KAAK,CAACI,GAAD,CAAMC,MAAN,CACb,CAGD,QAASrB,CAAAA,0BAAT,CAAoCsB,MAApC,CAAkE,CAChE,KAAMF,CAAAA,GAAG,CACP,0GADF,CAEA,KAAMC,CAAAA,MAAM,CAAG,CAACC,MAAD,CAAf,CACA,MAAON,CAAAA,KAAK,CAACI,GAAD,CAAMC,MAAN,CACb,CAGD,QAASb,CAAAA,oCAAT,CACEc,MADF,CAEEC,IAFF,CAGgB,CACd,KAAMH,CAAAA,GAAG,CACP,gIADF,CAEA,KAAMC,CAAAA,MAAM,CAAG,CAACC,MAAD,CAAS,GAAIU,CAAAA,IAAJ,CAAST,IAAT,CAAT,CAAf,CACA,MAAOP,CAAAA,KAAK,CAACI,GAAD,CAAMC,MAAN,CACb,CAED,QAASd,CAAAA,mCAAT,CACEe,MADF,CAEEC,IAFF,CAGgB,CACd,KAAMH,CAAAA,GAAG,CACP,gIADF,CAEA,KAAMC,CAAAA,MAAM,CAAG,CAACC,MAAD,CAAS,GAAIU,CAAAA,IAAJ,CAAST,IAAT,CAAT,CAAf,CACA,MAAOP,CAAAA,KAAK,CAACI,GAAD,CAAMC,MAAN,CACb,CAED,QAASzB,CAAAA,qCAAT,CACE0B,MADF,CAEEJ,SAFF,CAGEK,IAHF,CAIgB,CACd,KAAMH,CAAAA,GAAG,CACP,4HADF,CAEA,KAAMC,CAAAA,MAAM,CAAG,CAACC,MAAD,CAASJ,SAAT,CAAoB,GAAIc,CAAAA,IAAJ,CAAST,IAAT,CAApB,CAAf,CACA,MAAOP,CAAAA,KAAK,CAACI,GAAD,CAAMC,MAAN,CACb,CAGD,QAASxB,CAAAA,4BAAT,CACEyB,MADF,CAEEJ,SAFF,CAGgB,CACd,KAAME,CAAAA,GAAG,CACP,sGADF,CAEA,KAAMC,CAAAA,MAAM,CAAG,CAACC,MAAD,CAASJ,SAAT,CAAf,CACA,MAAOF,CAAAA,KAAK,CAACI,GAAD,CAAMC,MAAN,CACb,CAED,QAASnB,CAAAA,WAAT,CAAqBgB,SAArB,CAAwCC,SAAxC,CAAyE,CACvE,KAAMC,CAAAA,GAAG,CACP,yHADF,CAEA,KAAMC,CAAAA,MAAM,CAAG,CAACN,IAAI,CAAC6B,EAAL,EAAD,CAAY1B,SAAZ,CAAuBC,SAAvB,CAAkC,CAAlC,CAAf,CACA,MAAOH,CAAAA,KAAK,CAACI,GAAD,CAAMC,MAAN,CACb,CAED,QAASlB,CAAAA,cAAT,CAAwBe,SAAxB,CAA2CC,SAA3C,CAA4E,CAC1E,KAAMC,CAAAA,GAAG,CACP,yHADF,CAEA,KAAMC,CAAAA,MAAM,CAAG,CAACN,IAAI,CAAC6B,EAAL,EAAD,CAAY1B,SAAZ,CAAuBC,SAAvB,CAAkC,CAAlC,CAAf,CACA,MAAOH,CAAAA,KAAK,CAACI,GAAD,CAAMC,MAAN,CACb,CAED,QAAST,CAAAA,cAAT,CAAwBM,SAAxB,CAA2CC,SAA3C,CAA4E,CAC1E,KAAMC,CAAAA,GAAG,CACP,qEADF,CAEA,KAAMC,CAAAA,MAAM,CAAG,CAACH,SAAD,CAAYC,SAAZ,CAAf,CACA,MAAOH,CAAAA,KAAK,CAACI,GAAD,CAAMC,MAAN,CACb,CAED,QAASjB,CAAAA,mBAAT,CACEe,SADF,CAEE0B,MAFF,CAGEC,KAHF,CAIEtB,KAJF,CAKE,CACA,KAAMuB,CAAAA,YAAY,CAAG,GAAIf,CAAAA,IAAzB,CACAe,YAAY,CAACC,OAAb,CACED,YAAY,CAACE,OAAb,GAAyBhC,kBAAkB,CAACiC,aAD9C,EAGA,GAAI9B,CAAAA,GAAG,CAAI;AACb;AACA;AACA;AACA;AACA,0CALE,CAMA,KAAMC,CAAAA,MAAW,CAAG,CAACF,SAAD,CAAY4B,YAAZ,CAApB,CACA,GAAID,KAAJ,CAAW,CACT1B,GAAG,EAAI,2BAAP,CACAC,MAAM,CAAC8B,IAAP,CAAYL,KAAZ,CACD,CACD,GAAID,MAAJ,CAAY,CACVzB,GAAG,EAAI,2BAAP,CACAC,MAAM,CAAC8B,IAAP,CAAYN,MAAZ,CACD,CACDzB,GAAG,EAAI,yCAAP,CACAC,MAAM,CAAC8B,IAAP,CAAY3B,KAAZ,EACA,MAAOR,CAAAA,KAAK,CAACI,GAAD,CAAMC,MAAN,CACb,CAED,QAASf,CAAAA,gBAAT,CAA0B8B,IAA1B,CAAwCjB,SAAxC,CAA4D,CAC1D,KAAMC,CAAAA,GAAG,CAAG,wCAAZ,CACA,KAAMC,CAAAA,MAAM,CAAG,CAACe,IAAD,CAAf,CACA,GAAIjB,SAAJ,CAAe,CACb,MAAOH,CAAAA,KAAK,CAACI,GAAD,CAAMC,MAAN,CAAL,CAAmBiB,IAAnB,CAAyBC,IAAD,EAAe,CAC5C,MAAOlC,CAAAA,cAAc,CAACkC,IAAI,CAAC,CAAD,CAAJ,CAAQa,EAAT,CAAajC,SAAb,CACtB,CAFM,CAGR,CAJD,IAIO,CACL,MAAOH,CAAAA,KAAK,CAACI,GAAD,CAAMC,MAAN,CAAL,CAAmBiB,IAAnB,CAAyBC,IAAD,EAAe,CAC5C,MAAO7B,CAAAA,uBAAuB,CAAC6B,IAAI,CAAC,CAAD,CAAJ,CAAQa,EAAT,CAC/B,CAFM,CAGR,CACF,CAED,QAASzC,CAAAA,UAAT,CAAoByB,IAApB,CAAkC,CAChC,KAAMhB,CAAAA,GAAG,CAAG,0CAAZ,CACA,KAAMC,CAAAA,MAAM,CAAG,CAACe,IAAD,CAAf,CAEA,MAAOpB,CAAAA,KAAK,CAACI,GAAD,CAAMC,MAAN,CAAL,CAAmBiB,IAAnB,CAAyBF,IAAD,EAAe,CAC5C,MAAOA,CAAAA,IAAI,CAACiB,MAAL,CAAc,CACtB,CAFM,CAGR,CAED,QAASxC,CAAAA,UAAT,CAAoBS,MAApB,CAAoCH,SAApC,CAAuD,CACrD,KAAMC,CAAAA,GAAG,CAAG,+DAAZ,CACA,KAAMC,CAAAA,MAAM,CAAG,CAACC,MAAD,CAASH,SAAT,CAAf,CAEA,MAAOH,CAAAA,KAAK,CAACI,GAAD,CAAMC,MAAN,CAAL,CAAmBiB,IAAnB,CAAyBC,IAAD,EAAe,CAC5C,MAAOA,CAAAA,IAAI,CAACc,MAAL,CAAc,CACtB,CAFM,CAGR,CAED,QAASvC,CAAAA,UAAT,CAAoBI,SAApB,CAAuCoC,IAAvC,CAAsD,CACpD,KAAMlC,CAAAA,GAAG,CAAG,iDAAZ,CACA,KAAMC,CAAAA,MAAM,CAAG,CAACiC,IAAD,CAAOpC,SAAP,CAAf,CAEA,MAAOF,CAAAA,KAAK,CAACI,GAAD,CAAMC,MAAN,CACb","sourcesContent":["export default {\n  addComment,\n  deleteCommentById,\n  deleteReplyByParentId,\n  getCommentByPostId,\n  getNumberOfRepliesForCommentAfterDate,\n  getNumberOfRepliesForComment,\n  addReply,\n  getRepliesByCommentId,\n  getNumberOfCommentsForPost,\n  getRepliesUpToDate,\n  likeComment,\n  dislikeComment,\n  getCommentsActivity,\n  getCommentById,\n  getCommentByLink,\n  getNumberOfCommentsForPostAfterDate,\n  getNumberOfCommentsForPostBeforeDate,\n  getCommentByPostIdNoAccount,\n  getCommentByIdNoAccount,\n  linkExists,\n  unratedComment,\n  checkOwned,\n  updateNsfw\n};\n\nimport uuid from 'uuid';\n\n// db\nimport { query } from '@db/mySql';\n\n// constants\nimport { COMMENTS_CONSTANTS } from '@constants/comments';\n\n// Used for getting a comment or reply\nfunction getCommentById(commentId: string, accountId: string): Promise<any> {\n  const sql = `SELECT comments.id, comments.post_id, comments.parent_id, comments.creation_date, comments.content, comments.account_id, comments.image_src,\n                        comments.image_nsfw, comments.likes, comments.dislikes, comments.comment_parent_id, comments.link,\n        (CASE WHEN ( SELECT rating FROM comments_rating WHERE comment_id = comments.id AND account_id = ? ) = 1 THEN 1 \n            WHEN ( SELECT rating FROM comments_rating WHERE comment_id = comments.id AND account_id = ? ) = 0 THEN 0\n            ELSE NULL END) AS rated,\n        (CASE WHEN comments.account_id = ? THEN 1 ELSE 0 END) AS owned\n        FROM comments LEFT JOIN comments_rating ON comments.id = comments_rating.comment_id \n        WHERE comments.id = ? AND comments.deletion_date IS NULL GROUP BY comments.id`;\n  const values = [accountId, accountId, accountId, commentId];\n  return query(sql, values);\n}\n\nfunction getCommentByIdNoAccount(commentId: string): Promise<any> {\n  const sql = `SELECT comments.id, comments.post_id, comments.parent_id, comments.creation_date, comments.content, comments.account_id, comments.image_src,\n                        comments.image_nsfw, comments.likes, comments.dislikes, comments.link\n        FROM comments LEFT JOIN comments_rating ON comments.id = comments_rating.comment_id \n        WHERE comments.id = ? AND comments.deletion_date IS NULL GROUP BY comments.id`;\n  const values = [commentId];\n  return query(sql, values);\n}\n\n// postId, accountId, date, limit, type\n// Used for getting just the comments of a post\nfunction getCommentByPostId(\n  postId: string,\n  date: string,\n  limit: number,\n  type: string,\n  accountId: string\n): Promise<any> {\n  const selectSql = `SELECT comments.id, comments.post_id, comments.parent_id, comments.creation_date, comments.content, comments.account_id, comments.image_src,\n                        comments.image_nsfw, comments.likes, comments.dislikes, comments.link`;\n\n  let accountSql = '';\n  let accountValues: any[] = [];\n  if (accountId) {\n    accountSql = `, (CASE WHEN ( SELECT rating FROM comments_rating WHERE comment_id = comments.id AND account_id = ? ) = 1 THEN 1 \n                        WHEN ( SELECT rating FROM comments_rating WHERE comment_id = comments.id AND account_id = ? ) = 0 THEN 0\n                        ELSE NULL END) AS rated,\n                        (CASE WHEN comments.account_id = ? THEN 1 ELSE 0 END) AS owned`;\n    accountValues = [accountId, accountId, accountId];\n  }\n\n  const joinSql = ` FROM comments LEFT JOIN comments_rating ON comments.id = comments_rating.comment_id\n                        WHERE comments.post_id = ? AND comments.parent_id IS NULL AND comments.deletion_date IS NULL `;\n\n  let orderSql;\n  if (type == 'after') {\n    orderSql = ` AND comments.creation_date > ? GROUP BY comments.id ORDER BY comments.creation_date ASC LIMIT ? `;\n  } else {\n    orderSql = `  AND comments.creation_date < ? GROUP BY comments.id ORDER BY comments.creation_date DESC LIMIT ? `;\n  }\n\n  const sql = selectSql + accountSql + joinSql + orderSql;\n  const values = accountValues.concat([postId, new Date(date), limit]);\n  return query(sql, values);\n}\n\nfunction getCommentByPostIdNoAccount(\n  postId: string,\n  date: string,\n  limit: number,\n  type: string\n): Promise<any> {\n  const selectSql = `SELECT comments.id, comments.post_id, comments.parent_id, comments.creation_date, comments.content, comments.account_id, comments.image_src,\n                        comments.image_nsfw, comments.likes, comments.dislikes, comments.link\n        FROM comments LEFT JOIN comments_rating ON comments.id = comments_rating.comment_id\n        WHERE comments.post_id = ? AND comments.parent_id IS NULL AND comments.deletion_date IS NULL `;\n\n  let orderSql;\n  if (type == 'after') {\n    orderSql = ` AND comments.creation_date > ? GROUP BY comments.id ORDER BY comments.creation_date ASC LIMIT ? `;\n  } else {\n    orderSql = `  AND comments.creation_date < ? GROUP BY comments.id ORDER BY comments.creation_date DESC LIMIT ? `;\n  }\n\n  const sql = selectSql + orderSql;\n  const values = [postId, new Date(date), limit];\n  return query(sql, values);\n}\n\nfunction addComment(\n  commentId: string,\n  postId: string,\n  accountId: string,\n  content: string,\n  image: string,\n  imageNsfw: boolean,\n  link: string,\n  commentParentId: string\n): Promise<any> {\n  // Note the parent_id is NULL\n  const sql =\n    'INSERT INTO comments (id, post_id, account_id, creation_date, comment_parent_id, content, link, image_src, image_nsfw, likes, dislikes) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)';\n  const values = [\n    commentId,\n    postId,\n    accountId,\n    new Date(),\n    commentParentId,\n    content,\n    link,\n    image,\n    imageNsfw,\n    0,\n    0\n  ];\n  return query(sql, values).then((rows: any) => {\n    return getCommentById(commentId, accountId);\n  });\n}\n\nfunction deleteCommentById(commentId: string): Promise<any> {\n  const sql = 'UPDATE comments SET deletion_date = ? WHERE id = ?';\n  const values = [new Date(), commentId];\n  return query(sql, values);\n}\n\nfunction deleteReplyByParentId(parentId: string): Promise<any> {\n  const sql = 'UPDATE comments SET deletion_date = ? WHERE parent_id = ?';\n  const values = [new Date(), parentId];\n  return query(sql, values);\n}\n\n// Add a reply\nfunction addReply(\n  replyId: string,\n  postId: string,\n  commentId: string,\n  commentParentId: string,\n  accountId: string,\n  content: string,\n  image: string,\n  imageNsfw: boolean,\n  link: string\n): Promise<any> {\n  const sql =\n    'INSERT INTO comments (id, post_id, parent_id, comment_parent_id, account_id, creation_date, content, link, image_src, image_nsfw, likes, dislikes) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)';\n  const values = [\n    replyId,\n    postId,\n    commentId,\n    commentParentId,\n    accountId,\n    new Date(),\n    content,\n    link,\n    image,\n    imageNsfw,\n    0,\n    0\n  ];\n  return query(sql, values).then((rows: any) => {\n    return getCommentById(replyId, accountId);\n  });\n}\n\n// Used for getting just the comments of a post\nfunction getRepliesByCommentId(\n  postId: string,\n  commentId: string,\n  date: string,\n  limit: number,\n  accountId?: string\n): Promise<any> {\n  const selectSql = `SELECT comments.id, comments.post_id, comments.parent_id, comments.creation_date, comments.content, comments.account_id, comments.image_src,\n                        comments.image_nsfw, comments.likes, comments.dislikes, comments.link`;\n\n  let accountSql = '';\n  let replyValues: any[] = [];\n  if (accountId) {\n    accountSql = `, (CASE WHEN ( SELECT rating FROM comments_rating WHERE comment_id = comments.id AND account_id = ? ) = 1 THEN 1 \n                        WHEN ( SELECT rating FROM comments_rating WHERE comment_id = comments.id AND account_id = ? ) = 0 THEN 0\n                        ELSE NULL END) AS rated,\n                        (CASE WHEN comments.account_id = ? THEN 1 ELSE 0 END) AS owned`;\n    replyValues = replyValues.concat([accountId, accountId, accountId]);\n  }\n\n  const joinSql = ` FROM comments LEFT JOIN comments_rating ON comments.id = comments_rating.comment_id \n                    WHERE comments.post_id = ? AND comments.parent_id = ? AND comments.deletion_date IS NULL `;\n  replyValues = replyValues.concat([postId, commentId]);\n\n  let dateSql = ``;\n  if (date) {\n    dateSql = `AND comments.creation_date > ? `;\n    replyValues = replyValues.concat([new Date(date)]);\n  }\n\n  const orderSql = `GROUP BY comments.id ORDER BY comments.creation_date ASC LIMIT ?`;\n  const sql = selectSql + accountSql + joinSql + dateSql + orderSql;\n  replyValues = replyValues.concat([limit]);\n  return query(sql, replyValues);\n}\n\n// Used for getting just the comments of a post\nfunction getRepliesUpToDate(\n  postId: string,\n  commentId: string,\n  date: string,\n  accountId?: string\n): Promise<any> {\n  const selectSql = `SELECT comments.id, comments.post_id, comments.parent_id, comments.creation_date, comments.content, comments.account_id, comments.image_src,\n                        comments.image_nsfw, comments.likes, comments.dislikes, comments.link`;\n\n  let accountSql = '';\n  let values: any[] = [];\n  if (accountId) {\n    accountSql = `, (CASE WHEN ( SELECT rating FROM comments_rating WHERE comment_id = comments.id AND account_id = ? ) = 1 THEN 1 \n                        WHEN ( SELECT rating FROM comments_rating WHERE comment_id = comments.id AND account_id = ? ) = 0 THEN 0\n                        ELSE NULL END) AS rated,\n                        (CASE WHEN comments.account_id = ? THEN 1 ELSE 0 END) AS owned`;\n    values = values.concat([accountId, accountId, accountId]);\n  }\n\n  const joinSql = ` FROM comments LEFT JOIN comments_rating ON comments.id = comments_rating.comment_id \n                    WHERE comments.post_id = ? AND comments.parent_id = ? AND comments.deletion_date IS NULL `;\n  values = values.concat([postId, commentId]);\n\n  const dateSql = `AND comments.creation_date <= ? `;\n  values = values.concat([new Date(date)]);\n\n  const orderSql = `GROUP BY comments.id ORDER BY comments.creation_date ASC`;\n  const sql = selectSql + accountSql + joinSql + dateSql + orderSql;\n  return query(sql, values);\n}\n\n// Return the number of comments\nfunction getNumberOfCommentsForPost(postId: string): Promise<any> {\n  const sql =\n    'SELECT COUNT(*) as total FROM comments WHERE post_id = ? AND deletion_date IS NULL AND parent_id IS NULL';\n  const values = [postId];\n  return query(sql, values);\n}\n\n// Return the number of comments before a date\nfunction getNumberOfCommentsForPostBeforeDate(\n  postId: string,\n  date: string\n): Promise<any> {\n  const sql =\n    'SELECT COUNT(*) as total FROM comments WHERE post_id = ? AND deletion_date IS NULL AND parent_id IS NULL AND creation_date < ?';\n  const values = [postId, new Date(date)];\n  return query(sql, values);\n}\n\nfunction getNumberOfCommentsForPostAfterDate(\n  postId: string,\n  date: string\n): Promise<any> {\n  const sql =\n    'SELECT COUNT(*) as total FROM comments WHERE post_id = ? AND deletion_date IS NULL AND parent_id IS NULL AND creation_date > ?';\n  const values = [postId, new Date(date)];\n  return query(sql, values);\n}\n\nfunction getNumberOfRepliesForCommentAfterDate(\n  postId: string,\n  commentId: string,\n  date: string\n): Promise<any> {\n  const sql =\n    'SELECT COUNT(*) as total FROM comments WHERE post_id = ? and parent_id = ? AND deletion_date IS NULL AND creation_date > ?';\n  const values = [postId, commentId, new Date(date)];\n  return query(sql, values);\n}\n\n// Return the number of replies for comment for post\nfunction getNumberOfRepliesForComment(\n  postId: string,\n  commentId: string\n): Promise<any> {\n  const sql =\n    'SELECT COUNT(*) as total FROM comments WHERE post_id = ? AND parent_id = ? AND deletion_date IS NULL';\n  const values = [postId, commentId];\n  return query(sql, values);\n}\n\nfunction likeComment(commentId: string, accountId: string): Promise<any> {\n  const sql =\n    'INSERT INTO comments_rating (id, comment_id, account_id, rating) VALUES (?, ?, ?, ?) ON DUPLICATE KEY UPDATE rating = 1';\n  const values = [uuid.v4(), commentId, accountId, 1];\n  return query(sql, values);\n}\n\nfunction dislikeComment(commentId: string, accountId: string): Promise<any> {\n  const sql =\n    'INSERT INTO comments_rating (id, comment_id, account_id, rating) VALUES (?, ?, ?, ?) ON DUPLICATE KEY UPDATE rating = 0';\n  const values = [uuid.v4(), commentId, accountId, 0];\n  return query(sql, values);\n}\n\nfunction unratedComment(commentId: string, accountId: string): Promise<any> {\n  const sql =\n    'DELETE FROM comments_rating WHERE comment_id = ? AND account_id = ?';\n  const values = [commentId, accountId];\n  return query(sql, values);\n}\n\nfunction getCommentsActivity(\n  accountId: string,\n  before: Date | null,\n  after: Date | null,\n  limit: number\n) {\n  const activityDate = new Date();\n  activityDate.setDate(\n    activityDate.getDate() - COMMENTS_CONSTANTS.ACTIVITY_DAYS\n  );\n  let sql = `SELECT c1.id, c1.creation_date, c1.likes, c1.dislikes, c1.parent_id, c1.content, c1.image_src, c1.image_nsfw, c1.link, c1.account_id,\n                 p.content as post_content, p.image_src as post_image_src, p.image_nsfw as post_image_nsfw, p.link as post_link,\n                 c2.content as parent_content, c2.image_src as parent_image_src, c2.image_nsfw as parent_image_nsfw, c2.link as parent_link\n                 FROM comments c1 LEFT JOIN posts p ON p.id = c1.post_id LEFT JOIN comments c2 ON c1.parent_id = c2.id\n                 WHERE c1.account_id = ? AND c1.deletion_date IS NULL AND c2.deletion_date IS NULL AND p.deletion_date IS NULL \n                 AND c1.creation_date > ?`;\n  const values: any = [accountId, activityDate];\n  if (after) {\n    sql += ' AND c1.creation_date < ?';\n    values.push(after);\n  }\n  if (before) {\n    sql += ' AND c1.creation_date > ?';\n    values.push(before);\n  }\n  sql += ' ORDER BY c1.creation_date DESC LIMIT ?';\n  values.push(limit);\n  return query(sql, values);\n}\n\nfunction getCommentByLink(link: string, accountId?: string) {\n  const sql = 'SELECT id FROM comments WHERE link = ?';\n  const values = [link];\n  if (accountId) {\n    return query(sql, values).then((rows: any) => {\n      return getCommentById(rows[0].id, accountId);\n    });\n  } else {\n    return query(sql, values).then((rows: any) => {\n      return getCommentByIdNoAccount(rows[0].id);\n    });\n  }\n}\n\nfunction linkExists(link: string) {\n  const sql = 'SELECT link FROM comments WHERE link = ?';\n  const values = [link];\n\n  return query(sql, values).then((link: any) => {\n    return link.length > 0;\n  });\n}\n\nfunction checkOwned(postId: string, accountId: string) {\n  const sql = 'SELECT count(*) FROM comments WHERE id = ? AND account_id = ?';\n  const values = [postId, accountId];\n\n  return query(sql, values).then((rows: any) => {\n    return rows.length > 0;\n  });\n}\n\nfunction updateNsfw(commentId: string, nsfw: boolean) {\n  const sql = 'UPDATE comments SET image_nsfw = ? WHERE id = ?';\n  const values = [nsfw, commentId];\n\n  return query(sql, values);\n}\n"],"file":"comments.js"}