{"version":3,"sources":["../../../src/app/db/accounts.ts"],"names":["addAccount","getAccountByEmail","getAccountByUsername","deleteAccount","changePassword","getAccountById","addFacebookAccount","getFacebookAccount","updateUsername","connectFacebookAccount","disconnectFacebookAccount","addAccountMetadata","getAccountMetadata","updateAccountsMetadataDistanceUnit","updateAccountsMetadataSearchDistance","updateAccountsMetadataSearchType","verifyAccount","usernameExists","getGoogleAccount","addGoogleAccount","updateEmail","updatePhone","connectGoogleAccount","disconnectGoogleAccount","updateAccountsMetadataMatureFilter","updateAccountsMetadataThemeWeb","getAccountByEmailWithPass","getAccountByUsernameWithPass","uuid","roles","query","accountId","sql","values","v4","distanceUnit","searchDistance","searchType","matureFilter","themeWeb","email","username","pass","phone","salt","id","currentDate","Date","user","then","rows","length","account_id","password","date","facebookId","googleId"],"mappings":"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","sourcesContent":["export default {\n  addAccount,\n  getAccountByEmail,\n  getAccountByUsername,\n  deleteAccount,\n  changePassword,\n  getAccountById,\n  addFacebookAccount,\n  getFacebookAccount,\n  updateUsername,\n  connectFacebookAccount,\n  disconnectFacebookAccount,\n  addAccountMetadata,\n  getAccountMetadata,\n  updateAccountsMetadataDistanceUnit,\n  updateAccountsMetadataSearchDistance,\n  updateAccountsMetadataSearchType,\n  verifyAccount,\n  usernameExists,\n  getGoogleAccount,\n  addGoogleAccount,\n  updateEmail,\n  updatePhone,\n  connectGoogleAccount,\n  disconnectGoogleAccount,\n  updateAccountsMetadataMatureFilter,\n  updateAccountsMetadataThemeWeb,\n  getAccountByEmailWithPass,\n  getAccountByUsernameWithPass\n};\n\nimport uuid from 'uuid';\n\n// Services\nimport roles from '@services/authorization/roles';\n\nimport { query } from '@db/mySql';\n\n// Metadata\n\nfunction addAccountMetadata(accountId: string): Promise<any> {\n  const sql = `INSERT INTO accounts_metadata (id, account_id, distance_unit, search_type, search_distance, score, mature_filter, theme_web) VALUES (?, ?, ?, ?, ?, ?, ?, ?)`;\n  const values = [uuid.v4(), accountId, 'imperial', 'hot', 'global', 0, true, 'light'];\n  return query(sql, values);\n}\n\nfunction getAccountMetadata(accountId: string): Promise<any> {\n  const sql =\n    'SELECT mature_filter, distance_unit, search_type, search_distance, theme_web, score FROM accounts_metadata WHERE account_id = ?';\n  const values = [accountId];\n  return query(sql, values);\n}\n\nfunction updateAccountsMetadataDistanceUnit(\n  accountId: string,\n  distanceUnit: string\n): Promise<any> {\n  const sql =\n    'UPDATE accounts_metadata SET distance_unit = ? WHERE account_id = ?';\n  const values = [distanceUnit, accountId];\n  return query(sql, values);\n}\n\nfunction updateAccountsMetadataSearchDistance(\n  accountId: string,\n  searchDistance: string\n): Promise<any> {\n  const sql =\n    'UPDATE accounts_metadata SET search_distance = ? WHERE account_id = ?';\n  const values = [searchDistance, accountId];\n  return query(sql, values);\n}\n\nfunction updateAccountsMetadataSearchType(\n  accountId: string,\n  searchType: string\n): Promise<any> {\n  const sql =\n    'UPDATE accounts_metadata SET search_type = ? WHERE account_id = ?';\n  const values = [searchType, accountId];\n  return query(sql, values);\n}\n\nfunction updateAccountsMetadataMatureFilter(\n  accountId: string,\n  matureFilter: boolean\n): Promise<any> {\n  const sql =\n    'UPDATE accounts_metadata SET mature_filter = ? WHERE account_id = ?';\n  const values = [matureFilter, accountId];\n  return query(sql, values);\n}\n\nfunction updateAccountsMetadataThemeWeb(\n  accountId: string,\n  themeWeb: boolean\n): Promise<any> {\n  const sql =\n    'UPDATE accounts_metadata SET theme_web = ? WHERE account_id = ?';\n  const values = [themeWeb, accountId];\n  return query(sql, values);\n}\n\n// Account\n\nfunction addAccount(\n  email: string,\n  username: string,\n  pass: string,\n  phone: string,\n  salt: string\n): Promise<any> {\n  const id = uuid.v4();\n  const currentDate = new Date();\n  const sql = `INSERT INTO accounts (id, creation_date, email, email_updated_at, username, username_updated_at, \n                pass, phone, phone_updated_at, salt, role) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`;\n  const values = [\n    id,\n    currentDate,\n    email,\n    currentDate,\n    username,\n    currentDate,\n    pass,\n    phone,\n    currentDate,\n    salt,\n    false,\n    roles.user\n  ];\n  return query(sql, values).then((rows: any) => {\n    return getAccountById(id);\n  });\n}\n\nfunction getAccountByEmail(email: string): Promise<any> {\n  const sql = `SELECT id, email, email_updated_at, username, username_updated_at, phone, local_account,\n                 phone_updated_at, facebook_id, google_id, verified_date, creation_date, deletion_date, role\n                 FROM accounts WHERE email = ? AND deletion_date IS NULL LIMIT 1`;\n  const values = [email];\n  return query(sql, values);\n}\n\nfunction getAccountByUsername(username: string): Promise<any> {\n  const sql = `SELECT id, email, email_updated_at, username, username_updated_at, phone, local_account,\n                phone_updated_at, facebook_id, google_id, verified_date, creation_date, deletion_date, role\n                FROM accounts WHERE LOWER(username) = LOWER(?) AND deletion_date IS NULL LIMIT 1`;\n  const values = [username];\n  return query(sql, values);\n}\n\n// Should only be used by passport, not returned\nfunction getAccountByEmailWithPass(email: string): Promise<any> {\n  const sql =\n    'SELECT * FROM accounts WHERE email = ? AND deletion_date IS NULL LIMIT 1';\n  const values = [email];\n  return query(sql, values);\n}\n\n// Should only be used by passport, not returned\nfunction getAccountByUsernameWithPass(username: string): Promise<any> {\n  const sql =\n    'SELECT * FROM accounts WHERE username = ? AND deletion_date IS NULL LIMIT 1';\n  const values = [username];\n  return query(sql, values);\n}\n\nfunction getAccountById(id: string) {\n  const sql = `SELECT id, email, email_updated_at, username, username_updated_at, phone, local_account,\n                phone_updated_at, facebook_id, google_id, verified_date, creation_date, deletion_date, role\n                FROM accounts WHERE id = ? AND deletion_date IS NULL`;\n  const values = [id];\n  return query(sql, values);\n}\n\nfunction deleteAccount(accountId: string) {\n  const sql = 'UPDATE accounts SET deletion_date = ? WHERE id = ?';\n  const values = [new Date(), accountId];\n  return query(sql, values);\n}\n\nfunction updateUsername(username: string, accountId: string) {\n  const sql =\n    'UPDATE accounts SET username = ?, username_updated_at = ? WHERE id = ? AND deletion_date IS NULL';\n  const values = [username, new Date(), accountId];\n  return query(sql, values).then((rows: any) => {\n    return getAccountById(accountId);\n  });\n}\n\nfunction usernameExists(username: string) {\n  const sql =\n    'SELECT username FROM accounts WHERE LOWER(username) = LOWER(?) AND deletion_date IS NULL LIMIT 1';\n  const values = [username];\n\n  return query(sql, values).then((user: any) => {\n    return user.length > 0;\n  });\n}\n\nfunction updateEmail(email: string, accountId: string) {\n  const sql =\n    'UPDATE accounts SET email = ?, email_updated_at = ?, verified_date = NULL WHERE id = ? AND deletion_date IS NULL';\n  const values = [email, new Date(), accountId];\n  return query(sql, values).then((rows: any) => {\n    return getAccountById(accountId);\n  });\n}\n\nfunction updatePhone(phone: string, accountId: string) {\n  const sql =\n    'UPDATE accounts SET phone = ?, phone_updated_at = ? WHERE id = ? AND deletion_date IS NULL';\n  const values = [phone, new Date(), accountId];\n  return query(sql, values).then((rows: any) => {\n    return getAccountById(accountId);\n  });\n}\n\nfunction changePassword(account_id: string, password: string, salt: string) {\n  const sql =\n    'UPDATE accounts SET pass = ?, salt = ? WHERE id = ? AND deletion_date IS NULL';\n  const values = [password, salt, account_id];\n  return query(sql, values).then((rows: any) => {\n    return getAccountById(account_id);\n  });\n}\n\nfunction verifyAccount(account_id: string, date: Date) {\n  const sql =\n    'UPDATE accounts SET verified_date = ? WHERE id = ? AND deletion_date IS NULL';\n  const values = [date, account_id];\n  return query(sql, values).then((rows: any) => {\n    return getAccountById(account_id);\n  });\n}\n\n// Facebook\nfunction getFacebookAccount(facebookId: string): Promise<any> {\n  const sql = `SELECT id, email, email_updated_at, username, username_updated_at, phone, local_account,\n                phone_updated_at, facebook_id, google_id, verified_date, creation_date, deletion_date, role\n                FROM accounts WHERE facebook_id = ? AND deletion_date IS NULL LIMIT 1`;\n  const values = [facebookId];\n  return query(sql, values);\n}\n\nfunction addFacebookAccount(\n  id: string,\n  email: string,\n  username: string\n): Promise<any> {\n  const sql =\n    'INSERT INTO accounts (id, creation_date, email, username, facebook_id, role) VALUES (?, ?, ?, ?, ?, ?)';\n  const values = [uuid.v4(), new Date(), email, username, id, roles.user];\n  return query(sql, values).then((rows: any) => {\n    return getFacebookAccount(id);\n  });\n}\n\nfunction connectFacebookAccount(\n  facebookId: string,\n  accountId: string\n): Promise<any> {\n  const sql = 'UPDATE accounts SET facebook_id = ? WHERE id = ?';\n  const values = [facebookId, accountId];\n  return query(sql, values).then((rows: any) => {\n    return getAccountById(accountId);\n  });\n}\n\nfunction disconnectFacebookAccount(accountId: string): Promise<any> {\n  const sql = 'UPDATE accounts SET facebook_id = NULL WHERE id = ?';\n  const values = [accountId];\n  return query(sql, values);\n}\n\n// Google\nfunction getGoogleAccount(googleId: string): Promise<any> {\n  const sql = `SELECT id, email, email_updated_at, username, username_updated_at, phone, local_account,\n                phone_updated_at, facebook_id, google_id, verified_date, creation_date, deletion_date, role\n                FROM accounts WHERE google_id = ? AND deletion_date IS NULL LIMIT 1`;\n  const values = [googleId];\n  return query(sql, values);\n}\n\nfunction addGoogleAccount(\n  id: string,\n  email: string,\n  username: string\n): Promise<any> {\n  const sql =\n    'INSERT INTO accounts (id, creation_date, email, username, google_id, role) VALUES (?, ?, ?, ?, ?, ?)';\n  const values = [uuid.v4(), new Date(), email, username, id, roles.user];\n  return query(sql, values).then((rows: any) => {\n    return getGoogleAccount(id);\n  });\n}\n\nfunction connectGoogleAccount(\n  googleId: string,\n  accountId: string\n): Promise<any> {\n  const sql = 'UPDATE accounts SET google_id = ? WHERE id = ?';\n  const values = [googleId, accountId];\n  return query(sql, values).then((rows: any) => {\n    return getAccountById(accountId);\n  });\n}\n\nfunction disconnectGoogleAccount(accountId: string): Promise<any> {\n  const sql = 'UPDATE accounts SET google_id = NULL WHERE id = ?';\n  const values = [accountId];\n  return query(sql, values);\n}\n"],"file":"accounts.js"}